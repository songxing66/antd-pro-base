@primary-color: #1890ff;
/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable no-duplicate-selectors */
/* stylelint-disable */
.bezierEasingMixin() {
@functions: ~`(function() {
  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;

  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

  var float32ArraySupported = typeof Float32Array === 'function';

  function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
  function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
  function C (aA1)      { return 3.0 * aA1; }

  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
  function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }

  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
  function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }

  function binarySubdivide (aX, aA, aB, mX1, mX2) {
    var currentX, currentT, i = 0;
    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
    return currentT;
  }

  function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
   for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
     var currentSlope = getSlope(aGuessT, mX1, mX2);
     if (currentSlope === 0.0) {
       return aGuessT;
     }
     var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
     aGuessT -= currentX / currentSlope;
   }
   return aGuessT;
  }

  var BezierEasing = function (mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    // Precompute samples table
    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX (aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }
      --currentSample;

      // Interpolate to provide an initial guess for t
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;

      var initialSlope = getSlope(guessForT, mX1, mX2);
      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing (x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x; // linear
      }
      // Because JavaScript number are imprecise, we should guarantee the extremes are right.
      if (x === 0) {
        return 0;
      }
      if (x === 1) {
        return 1;
      }
      return calcBezier(getTForX(x), mY1, mY2);
    };
  };

  this.colorEasing = BezierEasing(0.26, 0.09, 0.37, 0.18);
  // less 3 requires a return
  return '';
})()`;
}
// It is hacky way to make this function will be compiled preferentially by less
// resolve error: `ReferenceError: colorPalette is not defined`
// https://github.com/ant-design/ant-motion/issues/44
.bezierEasingMixin();

/* stylelint-disable declaration-bang-space-before,no-duplicate-selectors,string-no-newline */
.tinyColorMixin() {
@functions: ~`(function() {
// TinyColor v1.4.1
// https://github.com/bgrins/TinyColor
// 2016-07-07, Brian Grinstead, MIT License
var trimLeft = /^\s+/,
    trimRight = /\s+$/,
    tinyCounter = 0,
    mathRound = Math.round,
    mathMin = Math.min,
    mathMax = Math.max,
    mathRandom = Math.random;

function tinycolor (color, opts) {

    color = (color) ? color : '';
    opts = opts || { };

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
       return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
        return new tinycolor(color, opts);
    }

    var rgb = inputToRGB(color);
    this._originalInput = color,
    this._r = rgb.r,
    this._g = rgb.g,
    this._b = rgb.b,
    this._a = rgb.a,
    this._roundA = mathRound(100*this._a) / 100,
    this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by inputToRgb
    if (this._r < 1) { this._r = mathRound(this._r); }
    if (this._g < 1) { this._g = mathRound(this._g); }
    if (this._b < 1) { this._b = mathRound(this._b); }

    this._ok = rgb.ok;
    this._tc_id = tinyCounter++;
}

tinycolor.prototype = {
    isDark: function() {
        return this.getBrightness() < 128;
    },
    isLight: function() {
        return !this.isDark();
    },
    isValid: function() {
        return this._ok;
    },
    getOriginalInput: function() {
      return this._originalInput;
    },
    getFormat: function() {
        return this._format;
    },
    getAlpha: function() {
        return this._a;
    },
    getBrightness: function() {
        //http://www.w3.org/TR/AERT#color-contrast
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function() {
        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        var rgb = this.toRgb();
        var RsRGB, GsRGB, BsRGB, R, G, B;
        RsRGB = rgb.r/255;
        GsRGB = rgb.g/255;
        BsRGB = rgb.b/255;

        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
    },
    setAlpha: function(value) {
        this._a = boundAlpha(value);
        this._roundA = mathRound(100*this._a) / 100;
        return this;
    },
    toHsv: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
    },
    toHsvString: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
        return (this._a == 1) ?
          "hsv("  + h + ", " + s + "%, " + v + "%)" :
          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
    },
    toHsl: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
    },
    toHslString: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
        return (this._a == 1) ?
          "hsl("  + h + ", " + s + "%, " + l + "%)" :
          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
    },
    toHex: function(allow3Char) {
        return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function(allow3Char) {
        return '#' + this.toHex(allow3Char);
    },
    toHex8: function(allow4Char) {
        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function(allow4Char) {
        return '#' + this.toHex8(allow4Char);
    },
    toRgb: function() {
        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
    },
    toRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function() {
        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
    },
    toPercentageRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function() {
        if (this._a === 0) {
            return "transparent";
        }

        if (this._a < 1) {
            return false;
        }

        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function(secondColor) {
        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
        var secondHex8String = hex8String;
        var gradientType = this._gradientType ? "GradientType = 1, " : "";

        if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
        }

        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
    },
    toString: function(format) {
        var formatSet = !!format;
        format = format || this._format;

        var formattedString = false;
        var hasAlpha = this._a < 1 && this._a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

        if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
                return this.toName();
            }
            return this.toRgbString();
        }
        if (format === "rgb") {
            formattedString = this.toRgbString();
        }
        if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
        }
        if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
        }
        if (format === "hex3") {
            formattedString = this.toHexString(true);
        }
        if (format === "hex4") {
            formattedString = this.toHex8String(true);
        }
        if (format === "hex8") {
            formattedString = this.toHex8String();
        }
        if (format === "name") {
            formattedString = this.toName();
        }
        if (format === "hsl") {
            formattedString = this.toHslString();
        }
        if (format === "hsv") {
            formattedString = this.toHsvString();
        }

        return formattedString || this.toHexString();
    },
    clone: function() {
        return tinycolor(this.toString());
    },

    _applyModification: function(fn, args) {
        var color = fn.apply(null, [this].concat([].slice.call(args)));
        this._r = color._r;
        this._g = color._g;
        this._b = color._b;
        this.setAlpha(color._a);
        return this;
    },
    lighten: function() {
        return this._applyModification(lighten, arguments);
    },
    brighten: function() {
        return this._applyModification(brighten, arguments);
    },
    darken: function() {
        return this._applyModification(darken, arguments);
    },
    desaturate: function() {
        return this._applyModification(desaturate, arguments);
    },
    saturate: function() {
        return this._applyModification(saturate, arguments);
    },
    greyscale: function() {
        return this._applyModification(greyscale, arguments);
    },
    spin: function() {
        return this._applyModification(spin, arguments);
    },

    _applyCombination: function(fn, args) {
        return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function() {
        return this._applyCombination(analogous, arguments);
    },
    complement: function() {
        return this._applyCombination(complement, arguments);
    },
    monochromatic: function() {
        return this._applyCombination(monochromatic, arguments);
    },
    splitcomplement: function() {
        return this._applyCombination(splitcomplement, arguments);
    },
    triad: function() {
        return this._applyCombination(triad, arguments);
    },
    tetrad: function() {
        return this._applyCombination(tetrad, arguments);
    }
};

// If input is an object, force 1 into "1.0" to handle ratios properly
// String input requires "1.0" as input, so 1 will be treated as 1
tinycolor.fromRatio = function(color, opts) {
    if (typeof color == "object") {
        var newColor = {};
        for (var i in color) {
            if (color.hasOwnProperty(i)) {
                if (i === "a") {
                    newColor[i] = color[i];
                }
                else {
                    newColor[i] = convertToPercentage(color[i]);
                }
            }
        }
        color = newColor;
    }

    return tinycolor(color, opts);
};

// Given a string or object, convert that input to RGB
// Possible string inputs:
//
//     "red"
//     "#f00" or "f00"
//     "#ff0000" or "ff0000"
//     "#ff000000" or "ff000000"
//     "rgb 255 0 0" or "rgb (255, 0, 0)"
//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
//
function inputToRGB(color) {

    var rgb = { r: 0, g: 0, b: 0 };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;

    if (typeof color == "string") {
        color = stringInputToObject(color);
    }

    if (typeof color == "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
        }

        if (color.hasOwnProperty("a")) {
            a = color.a;
        }
    }

    a = boundAlpha(a);

    return {
        ok: ok,
        format: color.format || format,
        r: mathMin(255, mathMax(rgb.r, 0)),
        g: mathMin(255, mathMax(rgb.g, 0)),
        b: mathMin(255, mathMax(rgb.b, 0)),
        a: a
    };
}

// Conversion Functions
// --------------------

// rgbToHsl, rgbToHsv, hslToRgb, hsvToRgb modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

// rgbToRgb
// Handle bounds / percentage checking to conform to CSS color spec
// <http://www.w3.org/TR/css3-color/>
// *Assumes:* r, g, b in [0, 255] or [0, 1]
// *Returns:* { r, g, b } in [0, 255]
function rgbToRgb(r, g, b){
    return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
    };
}

// rgbToHsl
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
function rgbToHsl(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }

        h /= 6;
    }

    return { h: h, s: s, l: l };
}

// hslToRgb
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hslToRgb(h, s, l) {
    var r, g, b;

    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);

    function hue2rgb(p, q, t) {
        if(t < 0) t += 1;
        if(t > 1) t -= 1;
        if(t < 1/6) return p + (q - p) * 6 * t;
        if(t < 1/2) return q;
        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
        return p;
    }

    if(s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// rgbToHsv
// Converts an RGB color value to HSV
// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
// *Returns:* { h, s, v } in [0,1]
function rgbToHsv(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, v = max;

    var d = max - min;
    s = max === 0 ? 0 : d / max;

    if(max == min) {
        h = 0; // achromatic
    }
    else {
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return { h: h, s: s, v: v };
}

// hsvToRgb
// Converts an HSV color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
 function hsvToRgb(h, s, v) {

    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);

    var i = Math.floor(h),
        f = h - i,
        p = v * (1 - s),
        q = v * (1 - f * s),
        t = v * (1 - (1 - f) * s),
        mod = i % 6,
        r = [v, q, p, p, t, v][mod],
        g = [t, v, v, q, p, p][mod],
        b = [p, p, t, v, v, q][mod];

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// rgbToHex
// Converts an RGB color to hex
// Assumes r, g, and b are contained in the set [0, 255]
// Returns a 3 or 6 character hex
function rgbToHex(r, g, b, allow3Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }

    return hex.join("");
}

// rgbaToHex
// Converts an RGBA color plus alpha transparency to hex
// Assumes r, g, b are contained in the set [0, 255] and
// a in [0, 1]. Returns a 4 or 8 character rgba hex
function rgbaToHex(r, g, b, a, allow4Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16)),
        pad2(convertDecimalToHex(a))
    ];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }

    return hex.join("");
}

// rgbaToArgbHex
// Converts an RGBA color to an ARGB Hex8 string
// Rarely used, but required for "toFilter()"
function rgbaToArgbHex(r, g, b, a) {

    var hex = [
        pad2(convertDecimalToHex(a)),
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    return hex.join("");
}

// equals
// Can be called with any tinycolor input
tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) { return false; }
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};

tinycolor.random = function() {
    return tinycolor.fromRatio({
        r: mathRandom(),
        g: mathRandom(),
        b: mathRandom()
    });
};

// Modification Functions
// ----------------------
// Thanks to less.js for some of the basics here
// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

function desaturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function saturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function greyscale(color) {
    return tinycolor(color).desaturate(100);
}

function lighten (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

function brighten(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var rgb = tinycolor(color).toRgb();
    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
    return tinycolor(rgb);
}

function darken (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
// Values outside of this range will be wrapped into this range.
function spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
}

// Combination Functions
// ---------------------
// Thanks to jQuery xColor for some of the ideas behind these
// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

function complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
}

function triad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
    ];
}

function tetrad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
    ];
}

function splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
    ];
}

function analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;

    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];

    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(tinycolor(hsl));
    }
    return ret;
}

function monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;

    while (results--) {
        ret.push(tinycolor({ h: h, s: s, v: v}));
        v = (v + modification) % 1;
    }

    return ret;
}

// Utility Functions
// ---------------------

tinycolor.mix = function(color1, color2, amount) {
    amount = (amount === 0) ? 0 : (amount || 50);

    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();

    var p = amount / 100;

    var rgba = {
        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
        a: ((rgb2.a - rgb1.a) * p) + rgb1.a
    };

    return tinycolor(rgba);
};

// Readability Functions
// ---------------------
// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

// contrast
// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
tinycolor.readability = function(color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
};

// isReadable
// Ensure that foreground and background color combinations meet WCAG2 guidelines.
// The third argument is an optional Object.
//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

// *Example*
//    tinycolor.isReadable("#000", "#111") => false
//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
tinycolor.isReadable = function(color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;

    out = false;

    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
        case "AAsmall":
        case "AAAlarge":
            out = readability >= 4.5;
            break;
        case "AAlarge":
            out = readability >= 3;
            break;
        case "AAAsmall":
            out = readability >= 7;
            break;
    }
    return out;

};

// mostReadable
// Given a base color and a list of possible foreground or background
// colors for that base, returns the most readable color.
// Optionally returns Black or White if the most readable color is unreadable.
// *Example*
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
tinycolor.mostReadable = function(baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size ;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors ;
    level = args.level;
    size = args.size;

    for (var i= 0; i < colorList.length ; i++) {
        readability = tinycolor.readability(baseColor, colorList[i]);
        if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
        }
    }

    if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
        return bestColor;
    }
    else {
        args.includeFallbackColors=false;
        return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
    }
};

// Big List of Colors
// ------------------
// <http://www.w3.org/TR/css3-color/#svg-color>
var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
};

// Make it easy to access colors via hexNames[hex]
var hexNames = tinycolor.hexNames = flip(names);

// Utilities
// ---------

// { 'name1': 'val1' } becomes { 'val1': 'name1' }
function flip(o) {
    var flipped = { };
    for (var i in o) {
        if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
        }
    }
    return flipped;
}

// Return a valid alpha value [0,1] with all invalid values being set to 1
function boundAlpha(a) {
    a = parseFloat(a);

    if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
    }

    return a;
}

// Take input from [0, n] and return it as [0, 1]
function bound01(n, max) {
    if (isOnePointZero(n)) { n = "100%"; }

    var processPercent = isPercentage(n);
    n = mathMin(max, mathMax(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
        n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if ((Math.abs(n - max) < 0.000001)) {
        return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return (n % max) / parseFloat(max);
}

// Force a number between 0 and 1
function clamp01(val) {
    return mathMin(1, mathMax(0, val));
}

// Parse a base-16 hex value into a base-10 integer
function parseIntFromHex(val) {
    return parseInt(val, 16);
}

// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
}

// Check to see if string passed in is a percentage
function isPercentage(n) {
    return typeof n === "string" && n.indexOf('%') != -1;
}

// Force a hex value to have 2 characters
function pad2(c) {
    return c.length == 1 ? '0' + c : '' + c;
}

// Replace a decimal with it's percentage value
function convertToPercentage(n) {
    if (n <= 1) {
        n = (n * 100) + "%";
    }

    return n;
}

// Converts a decimal to a hex value
function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
}
// Converts a hex value to a decimal
function convertHexToDecimal(h) {
    return (parseIntFromHex(h) / 255);
}

var matchers = (function() {

    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

    return {
        CSS_UNIT: new RegExp(CSS_UNIT),
        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
})();

// isValidCSSUnit
// Take in a single string / number and check to see if it looks like a CSS unit
// (see matchers above for definition).
function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
}

// stringInputToObject
// Permissive string parsing.  Take in a number of formats, and output an object
// based on detected format.  Returns { r, g, b } or { h, s, l } or { h, s, v}
function stringInputToObject(color) {

    color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
    var named = false;
    if (names[color]) {
        color = names[color];
        named = true;
    }
    else if (color == 'transparent') {
        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if ((match = matchers.rgb.exec(color))) {
        return { r: match[1], g: match[2], b: match[3] };
    }
    if ((match = matchers.rgba.exec(color))) {
        return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    if ((match = matchers.hsl.exec(color))) {
        return { h: match[1], s: match[2], l: match[3] };
    }
    if ((match = matchers.hsla.exec(color))) {
        return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    if ((match = matchers.hsv.exec(color))) {
        return { h: match[1], s: match[2], v: match[3] };
    }
    if ((match = matchers.hsva.exec(color))) {
        return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    if ((match = matchers.hex8.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex6.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
        };
    }
    if ((match = matchers.hex4.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex3.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
        };
    }

    return false;
}

function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {"level":"AA", "size":"small"};
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
        level = "AA";
    }
    if (size !== "small" && size !== "large") {
        size = "small";
    }
    return {"level":level, "size":size};
}

this.tinycolor = tinycolor;

})()`;
}
// It is hacky way to make this function will be compiled preferentially by less
// resolve error: `ReferenceError: colorPalette is not defined`
// https://github.com/ant-design/ant-motion/issues/44
.tinyColorMixin();

// We create a very complex algorithm which take the place of original tint/shade color system
// to make sure no one can understand it 👻
// and create an entire color palette magicly by inputing just a single primary color.
// We are using bezier-curve easing function and some color manipulations like tint/shade/darken/spin
.colorPaletteMixin() {
@functions: ~`(function() {
  var hueStep = 2;
  var saturationStep = 16;
  var saturationStep2 = 5;
  var brightnessStep1 = 5;
  var brightnessStep2 = 15;
  var lightColorCount = 5;
  var darkColorCount = 4;

  var getHue = function(hsv, i, isLight) {
    var hue;
    if (hsv.h >= 60 && hsv.h <= 240) {
      hue = isLight ? hsv.h - hueStep * i : hsv.h + hueStep * i;
    } else {
      hue = isLight ? hsv.h + hueStep * i : hsv.h - hueStep * i;
    }
    if (hue < 0) {
      hue += 360;
    } else if (hue >= 360) {
      hue -= 360;
    }
    return Math.round(hue);
  };
  var getSaturation = function(hsv, i, isLight) {
    var saturation;
    if (isLight) {
      saturation = Math.round(hsv.s * 100) - saturationStep * i;
    } else if (i === darkColorCount) {
      saturation = Math.round(hsv.s * 100) + saturationStep;
    } else {
      saturation = Math.round(hsv.s * 100) + saturationStep2 * i;
    }
    if (saturation > 100) {
      saturation = 100;
    }
    if (isLight && i === lightColorCount && saturation > 10) {
      saturation = 10;
    }
    if (saturation < 6) {
      saturation = 6;
    }
    return Math.round(saturation);
  };
  var getValue = function(hsv, i, isLight) {
    if (isLight) {
      return Math.round(hsv.v * 100) + brightnessStep1 * i;
    }
    return Math.round(hsv.v * 100) - brightnessStep2 * i;
  };

  this.colorPalette = function(color, index) {
    var isLight = index <= 6;
    var hsv = tinycolor(color).toHsv();
    var i = isLight ? lightColorCount + 1 - index : index - lightColorCount - 1;
    return tinycolor({
      h: getHue(hsv, i, isLight),
      s: getSaturation(hsv, i, isLight),
      v: getValue(hsv, i, isLight),
    }).toHexString();
  };
})()`;
}
// It is hacky way to make this function will be compiled preferentially by less
// resolve error: `ReferenceError: colorPalette is not defined`
// https://github.com/ant-design/ant-motion/issues/44
.colorPaletteMixin();

// color palettes
@blue-1: color(~`colorPalette('@{blue-6}', 1) `);
@blue-2: color(~`colorPalette('@{blue-6}', 2) `);
@blue-3: color(~`colorPalette('@{blue-6}', 3) `);
@blue-4: color(~`colorPalette('@{blue-6}', 4) `);
@blue-5: color(~`colorPalette('@{blue-6}', 5) `);
@blue-6: #1890ff;
@blue-7: color(~`colorPalette('@{blue-6}', 7) `);
@blue-8: color(~`colorPalette('@{blue-6}', 8) `);
@blue-9: color(~`colorPalette('@{blue-6}', 9) `);
@blue-10: color(~`colorPalette('@{blue-6}', 10) `);

@purple-1: color(~`colorPalette('@{purple-6}', 1) `);
@purple-2: color(~`colorPalette('@{purple-6}', 2) `);
@purple-3: color(~`colorPalette('@{purple-6}', 3) `);
@purple-4: color(~`colorPalette('@{purple-6}', 4) `);
@purple-5: color(~`colorPalette('@{purple-6}', 5) `);
@purple-6: #722ed1;
@purple-7: color(~`colorPalette('@{purple-6}', 7) `);
@purple-8: color(~`colorPalette('@{purple-6}', 8) `);
@purple-9: color(~`colorPalette('@{purple-6}', 9) `);
@purple-10: color(~`colorPalette('@{purple-6}', 10) `);

@cyan-1: color(~`colorPalette('@{cyan-6}', 1) `);
@cyan-2: color(~`colorPalette('@{cyan-6}', 2) `);
@cyan-3: color(~`colorPalette('@{cyan-6}', 3) `);
@cyan-4: color(~`colorPalette('@{cyan-6}', 4) `);
@cyan-5: color(~`colorPalette('@{cyan-6}', 5) `);
@cyan-6: #13c2c2;
@cyan-7: color(~`colorPalette('@{cyan-6}', 7) `);
@cyan-8: color(~`colorPalette('@{cyan-6}', 8) `);
@cyan-9: color(~`colorPalette('@{cyan-6}', 9) `);
@cyan-10: color(~`colorPalette('@{cyan-6}', 10) `);

@green-1: color(~`colorPalette('@{green-6}', 1) `);
@green-2: color(~`colorPalette('@{green-6}', 2) `);
@green-3: color(~`colorPalette('@{green-6}', 3) `);
@green-4: color(~`colorPalette('@{green-6}', 4) `);
@green-5: color(~`colorPalette('@{green-6}', 5) `);
@green-6: #52c41a;
@green-7: color(~`colorPalette('@{green-6}', 7) `);
@green-8: color(~`colorPalette('@{green-6}', 8) `);
@green-9: color(~`colorPalette('@{green-6}', 9) `);
@green-10: color(~`colorPalette('@{green-6}', 10) `);

@magenta-1: color(~`colorPalette('@{magenta-6}', 1) `);
@magenta-2: color(~`colorPalette('@{magenta-6}', 2) `);
@magenta-3: color(~`colorPalette('@{magenta-6}', 3) `);
@magenta-4: color(~`colorPalette('@{magenta-6}', 4) `);
@magenta-5: color(~`colorPalette('@{magenta-6}', 5) `);
@magenta-6: #eb2f96;
@magenta-7: color(~`colorPalette('@{magenta-6}', 7) `);
@magenta-8: color(~`colorPalette('@{magenta-6}', 8) `);
@magenta-9: color(~`colorPalette('@{magenta-6}', 9) `);
@magenta-10: color(~`colorPalette('@{magenta-6}', 10) `);

// alias of magenta
@pink-1: color(~`colorPalette('@{pink-6}', 1) `);
@pink-2: color(~`colorPalette('@{pink-6}', 2) `);
@pink-3: color(~`colorPalette('@{pink-6}', 3) `);
@pink-4: color(~`colorPalette('@{pink-6}', 4) `);
@pink-5: color(~`colorPalette('@{pink-6}', 5) `);
@pink-6: #eb2f96;
@pink-7: color(~`colorPalette('@{pink-6}', 7) `);
@pink-8: color(~`colorPalette('@{pink-6}', 8) `);
@pink-9: color(~`colorPalette('@{pink-6}', 9) `);
@pink-10: color(~`colorPalette('@{pink-6}', 10) `);

@red-1: color(~`colorPalette('@{red-6}', 1) `);
@red-2: color(~`colorPalette('@{red-6}', 2) `);
@red-3: color(~`colorPalette('@{red-6}', 3) `);
@red-4: color(~`colorPalette('@{red-6}', 4) `);
@red-5: color(~`colorPalette('@{red-6}', 5) `);
@red-6: #f5222d;
@red-7: color(~`colorPalette('@{red-6}', 7) `);
@red-8: color(~`colorPalette('@{red-6}', 8) `);
@red-9: color(~`colorPalette('@{red-6}', 9) `);
@red-10: color(~`colorPalette('@{red-6}', 10) `);

@orange-1: color(~`colorPalette('@{orange-6}', 1) `);
@orange-2: color(~`colorPalette('@{orange-6}', 2) `);
@orange-3: color(~`colorPalette('@{orange-6}', 3) `);
@orange-4: color(~`colorPalette('@{orange-6}', 4) `);
@orange-5: color(~`colorPalette('@{orange-6}', 5) `);
@orange-6: #fa8c16;
@orange-7: color(~`colorPalette('@{orange-6}', 7) `);
@orange-8: color(~`colorPalette('@{orange-6}', 8) `);
@orange-9: color(~`colorPalette('@{orange-6}', 9) `);
@orange-10: color(~`colorPalette('@{orange-6}', 10) `);

@yellow-1: color(~`colorPalette('@{yellow-6}', 1) `);
@yellow-2: color(~`colorPalette('@{yellow-6}', 2) `);
@yellow-3: color(~`colorPalette('@{yellow-6}', 3) `);
@yellow-4: color(~`colorPalette('@{yellow-6}', 4) `);
@yellow-5: color(~`colorPalette('@{yellow-6}', 5) `);
@yellow-6: #fadb14;
@yellow-7: color(~`colorPalette('@{yellow-6}', 7) `);
@yellow-8: color(~`colorPalette('@{yellow-6}', 8) `);
@yellow-9: color(~`colorPalette('@{yellow-6}', 9) `);
@yellow-10: color(~`colorPalette('@{yellow-6}', 10) `);

@volcano-1: color(~`colorPalette('@{volcano-6}', 1) `);
@volcano-2: color(~`colorPalette('@{volcano-6}', 2) `);
@volcano-3: color(~`colorPalette('@{volcano-6}', 3) `);
@volcano-4: color(~`colorPalette('@{volcano-6}', 4) `);
@volcano-5: color(~`colorPalette('@{volcano-6}', 5) `);
@volcano-6: #fa541c;
@volcano-7: color(~`colorPalette('@{volcano-6}', 7) `);
@volcano-8: color(~`colorPalette('@{volcano-6}', 8) `);
@volcano-9: color(~`colorPalette('@{volcano-6}', 9) `);
@volcano-10: color(~`colorPalette('@{volcano-6}', 10) `);

@geekblue-1: color(~`colorPalette('@{geekblue-6}', 1) `);
@geekblue-2: color(~`colorPalette('@{geekblue-6}', 2) `);
@geekblue-3: color(~`colorPalette('@{geekblue-6}', 3) `);
@geekblue-4: color(~`colorPalette('@{geekblue-6}', 4) `);
@geekblue-5: color(~`colorPalette('@{geekblue-6}', 5) `);
@geekblue-6: #2f54eb;
@geekblue-7: color(~`colorPalette('@{geekblue-6}', 7) `);
@geekblue-8: color(~`colorPalette('@{geekblue-6}', 8) `);
@geekblue-9: color(~`colorPalette('@{geekblue-6}', 9) `);
@geekblue-10: color(~`colorPalette('@{geekblue-6}', 10) `);

@lime-1: color(~`colorPalette('@{lime-6}', 1) `);
@lime-2: color(~`colorPalette('@{lime-6}', 2) `);
@lime-3: color(~`colorPalette('@{lime-6}', 3) `);
@lime-4: color(~`colorPalette('@{lime-6}', 4) `);
@lime-5: color(~`colorPalette('@{lime-6}', 5) `);
@lime-6: #a0d911;
@lime-7: color(~`colorPalette('@{lime-6}', 7) `);
@lime-8: color(~`colorPalette('@{lime-6}', 8) `);
@lime-9: color(~`colorPalette('@{lime-6}', 9) `);
@lime-10: color(~`colorPalette('@{lime-6}', 10) `);

@gold-1: color(~`colorPalette('@{gold-6}', 1) `);
@gold-2: color(~`colorPalette('@{gold-6}', 2) `);
@gold-3: color(~`colorPalette('@{gold-6}', 3) `);
@gold-4: color(~`colorPalette('@{gold-6}', 4) `);
@gold-5: color(~`colorPalette('@{gold-6}', 5) `);
@gold-6: #faad14;
@gold-7: color(~`colorPalette('@{gold-6}', 7) `);
@gold-8: color(~`colorPalette('@{gold-6}', 8) `);
@gold-9: color(~`colorPalette('@{gold-6}', 9) `);
@gold-10: color(~`colorPalette('@{gold-6}', 10) `);

@preset-colors: pink, magenta, red, volcano, orange, yellow, gold, cyan, lime, green, blue, geekblue,
  purple;

// The prefix to use on all css classes from ant.
@ant-prefix: ant;

// An override for the html selector for theme prefixes
@html-selector: html;

// -------- Colors -----------

@info-color: @blue-6;
@success-color: @green-6;
@processing-color: @blue-6;
@error-color: @red-6;
@highlight-color: @red-6;
@warning-color: @gold-6;
@normal-color: #d9d9d9;
@white: #fff;
@black: #000;

// Color used by default to control hover and active backgrounds and for
// alert info backgrounds.
@primary-1: color(~`colorPalette('@{primary-color}', 1) `); // replace tint(@primary-color, 90%)
@primary-2: color(~`colorPalette('@{primary-color}', 2) `); // replace tint(@primary-color, 80%)
@primary-3: color(~`colorPalette('@{primary-color}', 3) `); // unused
@primary-4: color(~`colorPalette('@{primary-color}', 4) `); // unused
@primary-5: color(
  ~`colorPalette('@{primary-color}', 5) `
); // color used to control the text color in many active and hover states, replace tint(@primary-color, 20%)
@primary-6: @primary-color; // color used to control the text color of active buttons, don't use, use @primary-color
@primary-7: color(~`colorPalette('@{primary-color}', 7) `); // replace shade(@primary-color, 5%)
@primary-8: color(~`colorPalette('@{primary-color}', 8) `); // unused
@primary-9: color(~`colorPalette('@{primary-color}', 9) `); // unused
@primary-10: color(~`colorPalette('@{primary-color}', 10) `); // unused

// Base Scaffolding Variables
// ---

// Background color for `<body>`
@body-background: #fff;
// Base background color for most components
@component-background: #fff;
@font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB',
  'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif, 'Apple Color Emoji',
  'Segoe UI Emoji', 'Segoe UI Symbol';
@code-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;
@text-color: fade(@black, 65%);
@text-color-secondary: fade(@black, 45%);
@text-color-inverse: @white;
@icon-color: inherit;
@icon-color-hover: fade(@black, 75%);
@heading-color: fade(#000, 85%);
@heading-color-dark: fade(@white, 100%);
@text-color-dark: fade(@white, 85%);
@text-color-secondary-dark: fade(@white, 65%);
@text-selection-bg: @primary-color;
@font-variant-base: tabular-nums;
@font-feature-settings-base: 'tnum';
@font-size-base: 14px;
@font-size-lg: @font-size-base + 2px;
@font-size-sm: 12px;
@heading-1-size: ceil(@font-size-base * 2.71);
@heading-2-size: ceil(@font-size-base * 2.14);
@heading-3-size: ceil(@font-size-base * 1.71);
@heading-4-size: ceil(@font-size-base * 1.42);
@line-height-base: 1.5;
@border-radius-base: 4px;
@border-radius-sm: 2px;

// vertical paddings
@padding-lg: 24px; // containers
@padding-md: 16px; // small containers and buttons
@padding-sm: 12px; // Form controls and items
@padding-xs: 8px; // small items

// vertical padding for all form controls
@control-padding-horizontal: @padding-sm;
@control-padding-horizontal-sm: @padding-xs;

// The background colors for active and hover states for things like
// list items or table cells.
@item-active-bg: @primary-1;
@item-hover-bg: @primary-1;

// ICONFONT
@iconfont-css-prefix: anticon;

// LINK
@link-color: @primary-color;
@link-hover-color: color(~`colorPalette('@{link-color}', 5) `);
@link-active-color: color(~`colorPalette('@{link-color}', 7) `);
@link-decoration: none;
@link-hover-decoration: none;

// Animation
@ease-base-out: cubic-bezier(0.7, 0.3, 0.1, 1);
@ease-base-in: cubic-bezier(0.9, 0, 0.3, 0.7);
@ease-out: cubic-bezier(0.215, 0.61, 0.355, 1);
@ease-in: cubic-bezier(0.55, 0.055, 0.675, 0.19);
@ease-in-out: cubic-bezier(0.645, 0.045, 0.355, 1);
@ease-out-back: cubic-bezier(0.12, 0.4, 0.29, 1.46);
@ease-in-back: cubic-bezier(0.71, -0.46, 0.88, 0.6);
@ease-in-out-back: cubic-bezier(0.71, -0.46, 0.29, 1.46);
@ease-out-circ: cubic-bezier(0.08, 0.82, 0.17, 1);
@ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.34);
@ease-in-out-circ: cubic-bezier(0.78, 0.14, 0.15, 0.86);
@ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1);
@ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06);
@ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1);

// Border color
@border-color-base: hsv(0, 0, 85%); // base border outline a component
@border-color-split: hsv(0, 0, 91%); // split border inside a component
@border-color-inverse: @white;
@border-width-base: 1px; // width of the border for a component
@border-style-base: solid; // style of a components border

// Outline
@outline-blur-size: 0;
@outline-width: 2px;
@outline-color: @primary-color;

@background-color-light: hsv(0, 0, 98%); // background of header and selected item
@background-color-base: hsv(0, 0, 96%); // Default grey background color

// Disabled states
@disabled-color: fade(#000, 25%);
@disabled-bg: @background-color-base;
@disabled-color-dark: fade(#fff, 35%);

// Shadow
@shadow-color: rgba(0, 0, 0, 0.15);
@shadow-color-inverse: @component-background;
@box-shadow-base: @shadow-1-down;
@shadow-1-up: 0 -2px 8px @shadow-color;
@shadow-1-down: 0 2px 8px @shadow-color;
@shadow-1-left: -2px 0 8px @shadow-color;
@shadow-1-right: 2px 0 8px @shadow-color;
@shadow-2: 0 4px 12px @shadow-color;

// Buttons
@btn-font-weight: 400;
@btn-border-radius-base: @border-radius-base;
@btn-border-radius-sm: @border-radius-base;
@btn-border-width: @border-width-base;
@btn-border-style: @border-style-base;
@btn-shadow: 0 2px 0 rgba(0, 0, 0, 0.015);
@btn-primary-shadow: 0 2px 0 rgba(0, 0, 0, 0.045);
@btn-text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.12);

@btn-primary-color: #fff;
@btn-primary-bg: @primary-color;

@btn-default-color: @text-color;
@btn-default-bg: @component-background;
@btn-default-border: @border-color-base;

@btn-danger-color: #fff;
@btn-danger-bg: color(~`colorPalette('@{error-color}', 5) `);
@btn-danger-border: color(~`colorPalette('@{error-color}', 5) `);

@btn-disable-color: @disabled-color;
@btn-disable-bg: @disabled-bg;
@btn-disable-border: @border-color-base;

@btn-padding-base: 0 @padding-md - 1px;
@btn-font-size-lg: @font-size-lg;
@btn-font-size-sm: @font-size-base;
@btn-padding-lg: @btn-padding-base;
@btn-padding-sm: 0 @padding-xs - 1px;

@btn-height-base: 32px;
@btn-height-lg: 40px;
@btn-height-sm: 24px;

@btn-circle-size: @btn-height-base;
@btn-circle-size-lg: @btn-height-lg;
@btn-circle-size-sm: @btn-height-sm;

@btn-group-border: @primary-5;

// Checkbox
@checkbox-size: 16px;
@checkbox-color: @primary-color;
@checkbox-check-color: #fff;
@checkbox-border-width: @border-width-base;

// Dropdown

@dropdown-selected-color: @primary-color;

// Empty
@empty-font-size: @font-size-base;

// Radio
@radio-size: 16px;
@radio-dot-color: @primary-color;

// Radio buttons
@radio-button-bg: @btn-default-bg;
@radio-button-checked-bg: @btn-default-bg;
@radio-button-color: @btn-default-color;
@radio-button-hover-color: @primary-5;
@radio-button-active-color: @primary-7;

// Media queries breakpoints
// Extra small screen / phone
@screen-xs: 480px;
@screen-xs-min: @screen-xs;

// Small screen / tablet
@screen-sm: 576px;
@screen-sm-min: @screen-sm;

// Medium screen / desktop
@screen-md: 768px;
@screen-md-min: @screen-md;

// Large screen / wide desktop
@screen-lg: 992px;
@screen-lg-min: @screen-lg;

// Extra large screen / full hd
@screen-xl: 1200px;
@screen-xl-min: @screen-xl;

// Extra extra large screen / large desktop
@screen-xxl: 1600px;
@screen-xxl-min: @screen-xxl;

// provide a maximum
@screen-xs-max: (@screen-sm-min - 1px);
@screen-sm-max: (@screen-md-min - 1px);
@screen-md-max: (@screen-lg-min - 1px);
@screen-lg-max: (@screen-xl-min - 1px);
@screen-xl-max: (@screen-xxl-min - 1px);

// Grid system
@grid-columns: 24;
@grid-gutter-width: 0;

// Layout
@layout-body-background: #f0f2f5;
@layout-header-background: #001529;
@layout-footer-background: @layout-body-background;
@layout-header-height: 64px;
@layout-header-padding: 0 50px;
@layout-footer-padding: 24px 50px;
@layout-sider-background: @layout-header-background;
@layout-trigger-height: 48px;
@layout-trigger-background: #002140;
@layout-trigger-color: #fff;
@layout-zero-trigger-width: 36px;
@layout-zero-trigger-height: 42px;
// Layout light theme
@layout-sider-background-light: #fff;
@layout-trigger-background-light: #fff;
@layout-trigger-color-light: @text-color;

// z-index list, order by `z-index`
@zindex-table-fixed: auto;
@zindex-affix: 10;
@zindex-back-top: 10;
@zindex-badge: 10;
@zindex-picker-panel: 10;
@zindex-popup-close: 10;
@zindex-modal: 1000;
@zindex-modal-mask: 1000;
@zindex-message: 1010;
@zindex-notification: 1010;
@zindex-popover: 1030;
@zindex-dropdown: 1050;
@zindex-picker: 1050;
@zindex-tooltip: 1060;

// Animation
@animation-duration-slow: 0.3s; // Modal
@animation-duration-base: 0.2s;
@animation-duration-fast: 0.1s; // Tooltip

//CollapsePanel
@collapse-panel-border-radius: @border-radius-base;

//Dropdown
@dropdown-vertical-padding: 5px;
@dropdown-font-size: @font-size-base;
@dropdown-line-height: 22px;

// Form
// ---
@label-required-color: @highlight-color;
@label-color: @heading-color;
@form-warning-input-bg: @input-bg;
@form-item-margin-bottom: 24px;
@form-item-trailing-colon: true;
@form-vertical-label-padding: 0 0 8px;
@form-vertical-label-margin: 0;
@form-error-input-bg: @input-bg;

// Input
// ---
@input-height-base: 32px;
@input-height-lg: 40px;
@input-height-sm: 24px;
@input-padding-horizontal: @control-padding-horizontal - 1px;
@input-padding-horizontal-base: @input-padding-horizontal;
@input-padding-horizontal-sm: @control-padding-horizontal-sm - 1px;
@input-padding-horizontal-lg: @input-padding-horizontal;
@input-padding-vertical-base: 4px;
@input-padding-vertical-sm: 1px;
@input-padding-vertical-lg: 6px;
@input-placeholder-color: hsv(0, 0, 75%);
@input-color: @text-color;
@input-border-color: @border-color-base;
@input-bg: @component-background;
@input-number-handler-active-bg: #f4f4f4;
@input-addon-bg: @background-color-light;
@input-hover-border-color: @primary-5;
@input-disabled-bg: @disabled-bg;
@input-outline-offset: 0 0;

// Select
// ---
@select-border-color: @border-color-base;
@select-item-selected-font-weight: 600;

// Tooltip
// ---
// Tooltip max width
@tooltip-max-width: 250px;
// Tooltip text color
@tooltip-color: #fff;
// Tooltip background color
@tooltip-bg: rgba(0, 0, 0, 0.75);
// Tooltip arrow width
@tooltip-arrow-width: 5px;
// Tooltip distance with trigger
@tooltip-distance: @tooltip-arrow-width - 1px + 4px;
// Tooltip arrow color
@tooltip-arrow-color: @tooltip-bg;

// Popover
// ---
// Popover body background color
@popover-bg: @component-background;
// Popover text color
@popover-color: @text-color;
// Popover maximum width
@popover-min-width: 177px;
// Popover arrow width
@popover-arrow-width: 6px;
// Popover arrow color
@popover-arrow-color: @popover-bg;
// Popover outer arrow width
// Popover outer arrow color
@popover-arrow-outer-color: @popover-bg;
// Popover distance with trigger
@popover-distance: @popover-arrow-width + 4px;

// Modal
// --
@modal-body-padding: 24px;
@modal-header-bg: @component-background;
@modal-footer-bg: transparent;
@modal-mask-bg: fade(@black, 65%);

// Progress
// --
@progress-default-color: @processing-color;
@progress-remaining-color: @background-color-base;
@progress-text-color: @text-color;
@progress-radius: 100px;

// Menu
// ---
@menu-inline-toplevel-item-height: 40px;
@menu-item-height: 40px;
@menu-collapsed-width: 80px;
@menu-bg: @component-background;
@menu-popup-bg: @component-background;
@menu-item-color: @text-color;
@menu-highlight-color: @primary-color;
@menu-item-active-bg: @item-active-bg;
@menu-item-active-border-width: 3px;
@menu-item-group-title-color: @text-color-secondary;

// dark theme
@menu-dark-color: @text-color-secondary-dark;
@menu-dark-bg: @layout-header-background;
@menu-dark-arrow-color: #fff;
@menu-dark-submenu-bg: #000c17;
@menu-dark-highlight-color: #fff;
@menu-dark-item-active-bg: @primary-color;

// Spin
// ---
@spin-dot-size-sm: 14px;
@spin-dot-size: 20px;
@spin-dot-size-lg: 32px;

// Table
// --
@table-header-bg: @background-color-light;
@table-header-color: @heading-color;
@table-header-sort-bg: @background-color-base;
@table-body-sort-bg: rgba(0, 0, 0, 0.01);
@table-row-hover-bg: @primary-1;
@table-selected-row-color: inherit;
@table-selected-row-bg: #fafafa;
@table-body-selected-sort-bg: @table-selected-row-bg;
@table-selected-row-hover-bg: @table-selected-row-bg;
@table-expanded-row-bg: #fbfbfb;
@table-padding-vertical: 16px;
@table-padding-horizontal: 16px;
@table-border-radius-base: @border-radius-base;

// Tag
// --
@tag-default-bg: @background-color-light;
@tag-default-color: @text-color;
@tag-font-size: @font-size-sm;

// TimePicker
// ---
@time-picker-panel-column-width: 56px;
@time-picker-panel-width: @time-picker-panel-column-width * 3;
@time-picker-selected-bg: @background-color-base;

// Carousel
// ---
@carousel-dot-width: 16px;
@carousel-dot-height: 3px;
@carousel-dot-active-width: 24px;

// Badge
// ---
@badge-height: 20px;
@badge-dot-size: 6px;
@badge-font-size: @font-size-sm;
@badge-font-weight: normal;
@badge-status-size: 6px;
@badge-text-color: @component-background;

// Rate
// ---
@rate-star-color: @yellow-6;
@rate-star-bg: @border-color-split;

// Card
// ---
@card-head-color: @heading-color;
@card-head-background: transparent;
@card-head-padding: 16px;
@card-inner-head-padding: 12px;
@card-padding-base: 24px;
@card-actions-background: @background-color-light;
@card-background: #cfd8dc;
@card-shadow: 0 2px 8px rgba(0, 0, 0, 0.09);
@card-radius: @border-radius-sm;

// Comment
// ---
@comment-padding-base: 16px 0;
@comment-nest-indent: 44px;
@comment-font-size-base: @font-size-base;
@comment-font-size-sm: @font-size-sm;
@comment-author-name-color: @text-color-secondary;
@comment-author-time-color: #ccc;
@comment-action-color: @text-color-secondary;
@comment-action-hover-color: #595959;

// Tabs
// ---
@tabs-card-head-background: @background-color-light;
@tabs-card-height: 40px;
@tabs-card-active-color: @primary-color;
@tabs-title-font-size: @font-size-base;
@tabs-title-font-size-lg: @font-size-lg;
@tabs-title-font-size-sm: @font-size-base;
@tabs-ink-bar-color: @primary-color;
@tabs-bar-margin: 0 0 16px 0;
@tabs-horizontal-margin: 0 32px 0 0;
@tabs-horizontal-padding: 12px 16px;
@tabs-horizontal-padding-lg: 16px;
@tabs-horizontal-padding-sm: 8px 16px;
@tabs-vertical-padding: 8px 24px;
@tabs-vertical-margin: 0 0 16px 0;
@tabs-scrolling-size: 32px;
@tabs-highlight-color: @primary-color;
@tabs-hover-color: @primary-5;
@tabs-active-color: @primary-7;
@tabs-card-gutter: 2px;
@tabs-card-tab-active-border-top: 2px solid transparent;

// BackTop
// ---
@back-top-color: #fff;
@back-top-bg: @text-color-secondary;
@back-top-hover-bg: @text-color;

// Avatar
// ---
@avatar-size-base: 32px;
@avatar-size-lg: 40px;
@avatar-size-sm: 24px;
@avatar-font-size-base: 18px;
@avatar-font-size-lg: 24px;
@avatar-font-size-sm: 14px;
@avatar-bg: #ccc;
@avatar-color: #fff;
@avatar-border-radius: @border-radius-base;

// Switch
// ---
@switch-height: 22px;
@switch-sm-height: 16px;
@switch-sm-checked-margin-left: -(@switch-sm-height - 3px);
@switch-disabled-opacity: 0.4;
@switch-color: @primary-color;
@switch-shadow-color: fade(#00230b, 20%);

// Pagination
// ---
@pagination-item-size: 32px;
@pagination-item-size-sm: 24px;
@pagination-font-family: Arial;
@pagination-font-weight-active: 500;
@pagination-item-bg-active: @component-background;

// PageHeader
// ---
@page-header-padding-horizontal: 24px;
@page-header-padding-vertical: 16px;

// Breadcrumb
// ---
@breadcrumb-base-color: @text-color-secondary;
@breadcrumb-last-item-color: @text-color;
@breadcrumb-font-size: @font-size-base;
@breadcrumb-icon-font-size: @font-size-base;
@breadcrumb-link-color: @text-color-secondary;
@breadcrumb-link-color-hover: @primary-5;
@breadcrumb-separator-color: @text-color-secondary;
@breadcrumb-separator-margin: 0 @padding-xs;

// Slider
// ---
@slider-margin: 14px 6px 10px;
@slider-rail-background-color: @background-color-base;
@slider-rail-background-color-hover: #e1e1e1;
@slider-track-background-color: @primary-3;
@slider-track-background-color-hover: @primary-4;
@slider-handle-border-width: 2px;
@slider-handle-background-color: @component-background;
@slider-handle-color: @primary-3;
@slider-handle-color-hover: @primary-4;
@slider-handle-color-focus: tint(@primary-color, 20%);
@slider-handle-color-focus-shadow: fade(@primary-color, 20%);
@slider-handle-color-tooltip-open: @primary-color;
@slider-handle-shadow: 0;
@slider-dot-border-color: @border-color-split;
@slider-dot-border-color-active: tint(@primary-color, 50%);
@slider-disabled-color: @disabled-color;
@slider-disabled-background-color: @component-background;

// Tree
// ---
@tree-title-height: 24px;
@tree-child-padding: 18px;
@tree-directory-selected-color: #fff;
@tree-directory-selected-bg: @primary-color;

// Collapse
// ---
@collapse-header-padding: 12px 16px;
@collapse-header-padding-extra: 40px;
@collapse-header-bg: @background-color-light;
@collapse-content-padding: @padding-md;
@collapse-content-bg: @component-background;

// Skeleton
// ---
@skeleton-color: #f2f2f2;

// Transfer
// ---
@transfer-header-height: 40px;
@transfer-disabled-bg: @disabled-bg;
@transfer-list-height: 200px;

// Message
// ---
@message-notice-content-padding: 10px 16px;

// Motion
// ---
@wave-animation-width: 6px;

// Alert
// ---
@alert-success-border-color: ~`colorPalette('@{success-color}', 3) `;
@alert-success-bg-color: ~`colorPalette('@{success-color}', 1) `;
@alert-success-icon-color: @success-color;
@alert-info-border-color: ~`colorPalette('@{info-color}', 3) `;
@alert-info-bg-color: ~`colorPalette('@{info-color}', 1) `;
@alert-info-icon-color: @info-color;
@alert-warning-border-color: ~`colorPalette('@{warning-color}', 3) `;
@alert-warning-bg-color: ~`colorPalette('@{warning-color}', 1) `;
@alert-warning-icon-color: @warning-color;
@alert-error-border-color: ~`colorPalette('@{error-color}', 3) `;
@alert-error-bg-color: ~`colorPalette('@{error-color}', 1) `;
@alert-error-icon-color: @error-color;

// List
// ---
@list-header-background: transparent;
@list-footer-background: transparent;
@list-empty-text-padding: @padding-md;
@list-item-padding: @padding-sm 0;
@list-item-meta-margin-bottom: @padding-md;
@list-item-meta-avatar-margin-right: @padding-md;
@list-item-meta-title-margin-bottom: @padding-sm;

// Statistic
// ---
@statistic-title-font-size: @font-size-base;
@statistic-content-font-size: 24px;
@statistic-unit-font-size: 16px;
@statistic-font-family: Tahoma, 'Helvetica Neue', @font-family;

// Drawer
// ---
@drawer-header-padding: 16px 24px;
@drawer-body-padding: 24px;

// Timeline
// ---
@timeline-width: 2px;
@timeline-color: @border-color-split;
@timeline-dot-border-width: 2px;
@timeline-dot-color: @primary-color;
@timeline-dot-bg: @component-background;







.cover-wrapper h3 {
  color: #000;
}
.cover-wrapper .cover-link a {
  border-radius: 4px;
}
.cover-wrapper .cover-link a.start {
  background: #2a85ff;
  border: 1px solid #2a85ff;
  color: #fff;
  box-shadow: 0 0 10px -3px #666;
}
.cover-wrapper .cover-link a.start:hover {
  box-shadow: 0 0 29px -3px #666;
}
.cover-wrapper .cover-link a.github {
  border: 1px solid #24292d;
  background: #24292d;
  color: rgba(255, 255, 255, 0.75);
  box-shadow: 0 0 10px -3px #666;
}
.cover-wrapper .cover-link a.github:hover {
  color: #ffffff;
  box-shadow: 0 0 29px -3px #666;
}
.cover-wrapper .slogan {
  color: #999;
}
*::-webkit-scrollbar-thumb {
  background-color: rgba(29, 34, 40, 0.2);
  border-radius: 3px;
}
*::-webkit-scrollbar-track {
  background: inherit;
}
*::-webkit-scrollbar-thumb:hover,
*::-webkit-scrollbar-scrollbarbutton:hover {
  background-color: rgba(29, 34, 40, 0.4);
}
body {
  color: #314659;
  background: #fff;
}
.main-wrapper {
  background: #fff;
}
.main-container {
  background: #fff;
}
.aside-container a[disabled] {
  color: #ccc;
}
.aside-container .menu-item-link-outside .anticon {
  color: @primary-color;
}
.outside-link-icon {
  color: #aaa;
}
.menu-site .ant-menu-item > a {
  color: #314659;
}
.menu-site .ant-menu-item-selected > a,
.menu-site .ant-menu-item > a:hover {
  color: @primary-color;
}
.menu-site .menu-antd-components-count {
  color: rgba(0, 0, 0, 0.25);
}
#_hj_feedback_container .path1::before {
  color: #1890ff !important;
}
#_hj_feedback_container .path2::before {
  color: #fff !important;
}
#header {
  background: #fff;
  box-shadow: 0 2px 8px #f0f1f2;
}
#header.home-nav-bottom {
  background: rgba(255, 255, 255, 0.9);
  border-bottom-color: #ebedee;
}
#header.home-nav-bottom .search {
  border-left-color: #ebedee;
}
#header.home-nav-bottom a {
  color: #314659;
}
#header .header-link {
  color: #314659;
}
#header .ant-menu-item-active .header-link {
  color: @primary-color;
}
#search-box {
  border-left: 1px solid #ebedf0;
}
#search-box .anticon {
  color: #ced4d9;
}
#search-box input {
  background: transparent;
  border: 0;
  box-shadow: none;
}
#search-box input::placeholder {
  color: #a3b1bf;
}
.header-lang-button {
  color: rgba(0, 0, 0, 0.65);
  border-color: #d9d9d9;
}
#nav {
  border: 0;
}
#nav.ant-menu-horizontal {
  border-bottom: none;
}
#nav.ant-menu-horizontal > .ant-menu-item,
#nav.ant-menu-horizontal > .ant-menu-submenu {
  border-top: 2px solid transparent;
}
#nav.ant-menu-horizontal > .ant-menu-item:hover,
#nav.ant-menu-horizontal > .ant-menu-submenu:hover {
  border-top: 2px solid @primary-color;
  border-bottom: 2px solid transparent;
}
#nav.ant-menu-horizontal > .ant-menu-submenu-open {
  border-top: 2px solid @primary-color;
  border-bottom: 2px solid transparent;
}
#nav.ant-menu-horizontal > .ant-menu-item-selected {
  border-top: 2px solid @primary-color;
  border-bottom: 2px solid transparent;
}
#nav.ant-menu-horizontal > .ant-menu-item-selected a {
  color: @primary-color;
}
.component-select.ant-select-dropdown {
  border: 0;
  border-radius: 0;
  box-shadow: 0 0 8px rgba(0, 0, 0, 0.25);
}
.component-select .ant-select-dropdown-menu-item {
  border-radius: 0 !important;
}
.component-select .ant-component-decs {
  color: #aaa;
}
.cover-wrapper h3 {
  color: #000;
}
.cover-wrapper .cover-link a {
  border-radius: 4px;
}
.cover-wrapper .cover-link a.start {
  background: #2a85ff;
  border: 1px solid #2a85ff;
  color: #fff;
  box-shadow: 0 0 10px -3px #666;
}
.cover-wrapper .cover-link a.start:hover {
  box-shadow: 0 0 29px -3px #666;
}
.cover-wrapper .cover-link a.github {
  border: 1px solid #24292d;
  background: #24292d;
  color: rgba(255, 255, 255, 0.75);
  box-shadow: 0 0 10px -3px #666;
}
.cover-wrapper .cover-link a.github:hover {
  color: #ffffff;
  box-shadow: 0 0 29px -3px #666;
}
.cover-wrapper .slogan {
  color: #999;
}
.prev-next-nav {
  border-top: 1px solid #ebedf0;
}
.prev-next-nav > a.prev-page .footer-nav-icon-before {
  color: #697b8c;
}
.prev-next-nav > a.prev-page:hover .footer-nav-icon-before {
  color: @primary-color;
}
.prev-next-nav > .next-page .footer-nav-icon-after {
  color: #697b8c;
}
.prev-next-nav > .next-page:hover .footer-nav-icon-after {
  color: @primary-color;
}
.markdown {
  color: #314659;
}
.markdown p > img {
  box-shadow: 0 8px 20px rgba(143, 168, 191, 0.35);
}
.markdown p > img.markdown-inline-image {
  box-shadow: none;
}
.markdown h1 {
  color: #0d1a26;
}
.markdown h2,
.markdown h3,
.markdown h4,
.markdown h5,
.markdown h6 {
  color: #0d1a26;
}
.markdown hr {
  background: #ebedf0;
  border: 0;
}
.markdown code {
  background: #f2f4f5;
  border: 1px solid #eee;
  border-radius: 3px;
}
.markdown pre {
  background: #f2f4f5;
  border-radius: 2px;
}
.markdown pre code {
  color: #314659;
  background: #f2f4f5;
  border: none;
}
.markdown > table {
  border: 1px solid #ebedf0;
  border-collapse: collapse;
  border-spacing: 0;
}
.markdown > table th {
  color: #5c6b77;
  background: rgba(0, 0, 0, 0.02);
}
.markdown > table th,
.markdown > table td {
  border: 1px solid #ebedf0;
}
.markdown blockquote {
  color: #697b8c;
  border-left: 4px solid #ebedf0;
}
.markdown .waiting {
  color: #ccc;
}
.markdown a.edit-button i {
  color: #697b8c;
}
.markdown a.edit-button i:hover {
  color: @primary-color;
}
.markdown.api-container table {
  border-width: 0;
}
.markdown.api-container table th,
.markdown.api-container table td {
  border-color: #e8e8e8;
  border-width: 1px 0;
}
.markdown.api-container table th {
  border-width: 0 0 2px 0;
}
.markdown.api-container table td:first-child {
  color: #003a8c;
}
.markdown.api-container table td:nth-child(3) {
  color: #c41d7f;
}
.grid-demo .demo-row,
[id^='components-grid-demo-'] .demo-row,
.grid-demo .code-box-demo .demo-row,
[id^='components-grid-demo-'] .code-box-demo .demo-row {
  background-image: linear-gradient(90deg, #f5f5f5 4.16666667%, transparent 4.16666667%, transparent 8.33333333%, #f5f5f5 8.33333333%, #f5f5f5 12.5%, transparent 12.5%, transparent 16.66666667%, #f5f5f5 16.66666667%, #f5f5f5 20.83333333%, transparent 20.83333333%, transparent 25%, #f5f5f5 25%, #f5f5f5 29.16666667%, transparent 29.16666667%, transparent 33.33333333%, #f5f5f5 33.33333333%, #f5f5f5 37.5%, transparent 37.5%, transparent 41.66666667%, #f5f5f5 41.66666667%, #f5f5f5 45.83333333%, transparent 45.83333333%, transparent 50%, #f5f5f5 50%, #f5f5f5 54.16666667%, transparent 54.16666667%, transparent 58.33333333%, #f5f5f5 58.33333333%, #f5f5f5 62.5%, transparent 62.5%, transparent 66.66666667%, #f5f5f5 66.66666667%, #f5f5f5 70.83333333%, transparent 70.83333333%, transparent 75%, #f5f5f5 75%, #f5f5f5 79.16666667%, transparent 79.16666667%, transparent 83.33333333%, #f5f5f5 83.33333333%, #f5f5f5 87.5%, transparent 87.5%, transparent 91.66666667%, #f5f5f5 91.66666667%, #f5f5f5 95.83333333%, transparent 95.83333333%);
}
.grid-demo .ant-row-flex,
[id^='components-grid-demo-'] .ant-row-flex,
.grid-demo .code-box-demo .ant-row-flex,
[id^='components-grid-demo-'] .code-box-demo .ant-row-flex {
  background: #f5f5f5;
}
.grid-demo .ant-row > div,
[id^='components-grid-demo-'] .ant-row > div,
.grid-demo .code-box-demo .ant-row > div,
[id^='components-grid-demo-'] .code-box-demo .ant-row > div,
.grid-demo .ant-row-flex > div,
[id^='components-grid-demo-'] .ant-row-flex > div,
.grid-demo .code-box-demo .ant-row-flex > div,
[id^='components-grid-demo-'] .code-box-demo .ant-row-flex > div {
  color: #fff;
  border-radius: 0;
}
.grid-demo .code-box-demo .ant-row > div:not(.gutter-row),
[id^='components-grid-demo-'] .code-box-demo .ant-row > div:not(.gutter-row),
.grid-demo .code-box-demo .ant-row-flex > div:not(.gutter-row),
[id^='components-grid-demo-'] .code-box-demo .ant-row-flex > div:not(.gutter-row) {
  background: #00a0e9;
}
.grid-demo .code-box-demo .ant-row > div:not(.gutter-row):nth-child(2n + 1),
[id^='components-grid-demo-'] .code-box-demo .ant-row > div:not(.gutter-row):nth-child(2n + 1),
.grid-demo .code-box-demo .ant-row-flex > div:not(.gutter-row):nth-child(2n + 1),
[id^='components-grid-demo-'] .code-box-demo .ant-row-flex > div:not(.gutter-row):nth-child(2n + 1) {
  background: rgba(0, 160, 233, 0.7);
}
.grid-demo .ant-row .demo-col,
[id^='components-grid-demo-'] .ant-row .demo-col,
.grid-demo .code-box-demo .ant-row .demo-col,
[id^='components-grid-demo-'] .code-box-demo .ant-row .demo-col {
  color: #fff;
  border: none;
}
.grid-demo .ant-row .demo-col-1,
[id^='components-grid-demo-'] .ant-row .demo-col-1,
.grid-demo .ant-row .demo-col-1,
[id^='components-grid-demo-'] .ant-row .demo-col-1 {
  background: rgba(0, 160, 233, 0.7);
}
.grid-demo .ant-row .demo-col-2,
[id^='components-grid-demo-'] .ant-row .demo-col-2,
.grid-demo .code-box-demo .ant-row .demo-col-2,
[id^='components-grid-demo-'] .code-box-demo .ant-row .demo-col-2 {
  background: rgba(0, 160, 233, 0.5);
}
.grid-demo .ant-row .demo-col-3,
[id^='components-grid-demo-'] .ant-row .demo-col-3,
.grid-demo .code-box-demo .ant-row .demo-col-3,
[id^='components-grid-demo-'] .code-box-demo .ant-row .demo-col-3 {
  color: #999;
  background: rgba(255, 255, 255, 0.2);
}
.grid-demo .ant-row .demo-col-4,
[id^='components-grid-demo-'] .ant-row .demo-col-4,
.grid-demo .code-box-demo .ant-row .demo-col-4,
[id^='components-grid-demo-'] .code-box-demo .ant-row .demo-col-4 {
  background: rgba(0, 160, 233, 0.6);
}
.grid-demo .ant-row .demo-col-5,
[id^='components-grid-demo-'] .ant-row .demo-col-5,
.grid-demo .code-box-demo .ant-row .demo-col-5,
[id^='components-grid-demo-'] .code-box-demo .ant-row .demo-col-5 {
  color: #999;
  background: rgba(255, 255, 255, 0.5);
}
.resource-card {
  color: #777;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
}
.resource-card:hover {
  border-color: transparent;
  box-shadow: 0 3px 8px #d3ddeb;
}
.resource-card:hover .resource-card-title {
  color: @primary-color;
}
.resource-card-title {
  color: #314659;
}
.resource-card-hot-badge {
  color: #fff;
  background: #f50;
  border-radius: 2px;
}
.resource-card-description {
  color: #697b8c;
}
.preview-image-wrapper {
  background: #f2f4f5;
}
.preview-image-wrapper.video {
  background: 0;
}
.preview-image-wrapper.good::after {
  background: @primary-color;
}
.preview-image-wrapper.bad::after {
  background: #f5222d;
}
.preview-image-title {
  color: #314659;
}
.preview-image-description {
  color: #697b8c;
}
.preview-image-description hr {
  background: none;
  border: 0;
}
.preview-image-box img {
  background: #fff;
  border-radius: 4px;
}
.preview-image-box img.no-padding {
  background: none;
}
.preview-image-boxes.preview-image-boxes-with-carousel img {
  box-shadow: 0 1px 0 0 #ddd, 0 3px 0 0 #fff, 0 4px 0 0 #ddd, 0 6px 0 0 #fff, 0 7px 0 0 #ddd;
}
.preview-image-box img:hover {
  box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.3);
}
.image-modal .ant-carousel .slick-dots li button {
  background: #888;
}
.principle-wrapper .principle {
  border: 1px solid #e8e8e8;
  border-radius: 4px;
}
.toc {
  border-left: 1px solid #ebedf0;
}
.toc a {
  color: #314659;
  border-left: 1px solid transparent;
}
.toc a:hover {
  color: @primary-color;
}
.toc a.current {
  color: @primary-color;
  border-color: @primary-color;
}
.toc-affix .ant-affix {
  background: #fff;
}
.toc-affix-bottom .ant-affix {
  background: #fff;
}
#page-404 {
  background-image: url('https://os.alipayobjects.com/rmsportal/NOAjOBbnYCrNzrW.jpg');
  background-repeat: no-repeat;
  background-position: center;
  background-size: 100%;
  background-attachment: fixed;
}
#page-404 h1 {
  color: @primary-color;
}
#page-404 p {
  color: #314659;
}
pre code {
  color: #314659;
  background: white;
  border: 1px solid #e9e9e9;
  border-radius: 2px;
}
code[class*='language-'],
pre[class*='language-'] {
  color: black;
  background: none;
}
pre[class*='language-']::-moz-selection,
pre[class*='language-'] ::-moz-selection,
code[class*='language-']::-moz-selection,
code[class*='language-'] ::-moz-selection {
  background: #b3d4fc;
}
pre[class*='language-']::selection,
pre[class*='language-'] ::selection,
code[class*='language-']::selection,
code[class*='language-'] ::selection {
  background: #b3d4fc;
}
:not(pre) > code[class*='language-'],
pre[class*='language-'] {
  background: #f2f4f5;
}
:not(pre) > code[class*='language-'] {
  border-radius: 0.3em;
}
.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: slategray;
}
.token.punctuation {
  color: #999;
}
.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
  color: #f81d22;
}
.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: #0b8235;
}
.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
  color: #0b8235;
}
.token.atrule,
.token.attr-value,
.token.keyword {
  color: #008dff;
}
.token.function {
  color: #f81d22;
}
.token.regex,
.token.important,
.token.variable {
  color: #e90;
}
.code-box {
  border: 1px solid #ebedf0;
  border-radius: 2px;
}
.code-box:target {
  border: 1px solid @primary-color;
}
.code-box-expand-trigger {
  color: #3b4357;
}
.code-box-title {
  color: #777;
  background: #fff;
  border-radius: 2px 2px 0 0;
}
.code-box-title a,
.code-box-title a:hover {
  color: #314659;
}
.code-box a.edit-button {
  background: #fff;
}
.code-box-demo {
  color: rgba(0, 0, 0, 0.65);
  border-bottom: 1px solid #ebedf0;
}
.code-box iframe {
  border: 0;
}
.code-box-meta.markdown {
  border-radius: 0 0 2px 2px;
}
.code-box.expand .code-box-meta {
  border-bottom: 1px dashed #ebedf0;
  border-radius: 0;
}
.code-box .code-expand-icon-show,
.code-box .code-expand-icon-hide {
  box-shadow: none;
}
.code-box .highlight-wrapper {
  border-radius: 0 0 2px 2px;
}
.code-box .highlight pre {
  background: #fff;
}
.code-box .highlight:not(:first-child) {
  border-top: 1px dashed #ebedf0;
}
.code-box-actions {
  border-top: 1px dashed #ebedf0;
}
.code-box-code-copy {
  color: #697b8c;
  background: #fff;
  border-radius: 20px;
}
.code-box-code-copy:hover {
  color: #697b8c;
}
.code-box-code-copy.anticon-check {
  color: #52c41a !important;
}
.code-box-codepen {
  background: transparent url('https://gw.alipayobjects.com/zos/rmsportal/OtZslpOjYXijshDERXwc.svg') center / 14px no-repeat;
  border: 0;
}
.code-box-riddle {
  background: transparent url('https://gw.alipayobjects.com/zos/rmsportal/DlHbxMCyeuyOrqOdbgik.svg') center / 14px no-repeat;
  border: 0;
}
.code-box-codesandbox {
  background: transparent url('https://gw.alipayobjects.com/zos/rmsportal/aaYmtdDyHSCkXyLZVgGK.svg') center / 14px no-repeat;
  border: 0;
}
.code-box pre code {
  background: #fff;
  border: none;
}
.code-box-debug {
  border-color: #d3adf7;
}
.code-box-debug .code-box-title a {
  color: #722ed1;
}
.color-palette-picker-validation {
  color: #f5222d;
}
.main-color .palette-blue-1 {
  background: color(~`colorPalette("@{primary-color}", 1)`);
}
.main-color .palette-blue-2 {
  background: color(~`colorPalette("@{primary-color}", 2)`);
}
.main-color .palette-blue-3 {
  background: color(~`colorPalette("@{primary-color}", 3)`);
}
.main-color .palette-blue-4 {
  background: color(~`colorPalette("@{primary-color}", 4)`);
}
.main-color .palette-blue-5 {
  background: color(~`colorPalette("@{primary-color}", 5)`);
}
.main-color .palette-blue-6 {
  background: @primary-color;
}
.main-color .palette-blue-7 {
  background: color(~`colorPalette("@{primary-color}", 7)`);
}
.main-color .palette-blue-8 {
  background: #0050b3;
}
.main-color .palette-blue-9 {
  background: #003a8c;
}
.main-color .palette-blue-10 {
  background: #002766;
}
.main-color .palette-purple-1 {
  background: #f9f0ff;
}
.main-color .palette-purple-2 {
  background: #efdbff;
}
.main-color .palette-purple-3 {
  background: #d3adf7;
}
.main-color .palette-purple-4 {
  background: #b37feb;
}
.main-color .palette-purple-5 {
  background: #9254de;
}
.main-color .palette-purple-6 {
  background: #722ed1;
}
.main-color .palette-purple-7 {
  background: #531dab;
}
.main-color .palette-purple-8 {
  background: #391085;
}
.main-color .palette-purple-9 {
  background: #22075e;
}
.main-color .palette-purple-10 {
  background: #120338;
}
.main-color .palette-cyan-1 {
  background: #e6fffb;
}
.main-color .palette-cyan-2 {
  background: #b5f5ec;
}
.main-color .palette-cyan-3 {
  background: #87e8de;
}
.main-color .palette-cyan-4 {
  background: #5cdbd3;
}
.main-color .palette-cyan-5 {
  background: #36cfc9;
}
.main-color .palette-cyan-6 {
  background: #13c2c2;
}
.main-color .palette-cyan-7 {
  background: #08979c;
}
.main-color .palette-cyan-8 {
  background: #006d75;
}
.main-color .palette-cyan-9 {
  background: #00474f;
}
.main-color .palette-cyan-10 {
  background: #002329;
}
.main-color .palette-green-1 {
  background: #f6ffed;
}
.main-color .palette-green-2 {
  background: #d9f7be;
}
.main-color .palette-green-3 {
  background: #b7eb8f;
}
.main-color .palette-green-4 {
  background: #95de64;
}
.main-color .palette-green-5 {
  background: #73d13d;
}
.main-color .palette-green-6 {
  background: #52c41a;
}
.main-color .palette-green-7 {
  background: #389e0d;
}
.main-color .palette-green-8 {
  background: #237804;
}
.main-color .palette-green-9 {
  background: #135200;
}
.main-color .palette-green-10 {
  background: #092b00;
}
.main-color .palette-magenta-1 {
  background: #fff0f6;
}
.main-color .palette-magenta-2 {
  background: #ffd6e7;
}
.main-color .palette-magenta-3 {
  background: #ffadd2;
}
.main-color .palette-magenta-4 {
  background: #ff85c0;
}
.main-color .palette-magenta-5 {
  background: #f759ab;
}
.main-color .palette-magenta-6 {
  background: #eb2f96;
}
.main-color .palette-magenta-7 {
  background: #c41d7f;
}
.main-color .palette-magenta-8 {
  background: #9e1068;
}
.main-color .palette-magenta-9 {
  background: #780650;
}
.main-color .palette-magenta-10 {
  background: #520339;
}
.main-color .palette-red-1 {
  background: #fff1f0;
}
.main-color .palette-red-2 {
  background: #ffccc7;
}
.main-color .palette-red-3 {
  background: #ffa39e;
}
.main-color .palette-red-4 {
  background: #ff7875;
}
.main-color .palette-red-5 {
  background: #ff4d4f;
}
.main-color .palette-red-6 {
  background: #f5222d;
}
.main-color .palette-red-7 {
  background: #cf1322;
}
.main-color .palette-red-8 {
  background: #a8071a;
}
.main-color .palette-red-9 {
  background: #820014;
}
.main-color .palette-red-10 {
  background: #5c0011;
}
.main-color .palette-volcano-1 {
  background: #fff2e8;
}
.main-color .palette-volcano-2 {
  background: #ffd8bf;
}
.main-color .palette-volcano-3 {
  background: #ffbb96;
}
.main-color .palette-volcano-4 {
  background: #ff9c6e;
}
.main-color .palette-volcano-5 {
  background: #ff7a45;
}
.main-color .palette-volcano-6 {
  background: #fa541c;
}
.main-color .palette-volcano-7 {
  background: #d4380d;
}
.main-color .palette-volcano-8 {
  background: #ad2102;
}
.main-color .palette-volcano-9 {
  background: #871400;
}
.main-color .palette-volcano-10 {
  background: #610b00;
}
.main-color .palette-orange-1 {
  background: #fff7e6;
}
.main-color .palette-orange-2 {
  background: #ffe7ba;
}
.main-color .palette-orange-3 {
  background: #ffd591;
}
.main-color .palette-orange-4 {
  background: #ffc069;
}
.main-color .palette-orange-5 {
  background: #ffa940;
}
.main-color .palette-orange-6 {
  background: #fa8c16;
}
.main-color .palette-orange-7 {
  background: #d46b08;
}
.main-color .palette-orange-8 {
  background: #ad4e00;
}
.main-color .palette-orange-9 {
  background: #873800;
}
.main-color .palette-orange-10 {
  background: #612500;
}
.main-color .palette-gold-1 {
  background: #fffbe6;
}
.main-color .palette-gold-2 {
  background: #fff1b8;
}
.main-color .palette-gold-3 {
  background: #ffe58f;
}
.main-color .palette-gold-4 {
  background: #ffd666;
}
.main-color .palette-gold-5 {
  background: #ffc53d;
}
.main-color .palette-gold-6 {
  background: #faad14;
}
.main-color .palette-gold-7 {
  background: #d48806;
}
.main-color .palette-gold-8 {
  background: #ad6800;
}
.main-color .palette-gold-9 {
  background: #874d00;
}
.main-color .palette-gold-10 {
  background: #613400;
}
.main-color .palette-yellow-1 {
  background: #feffe6;
}
.main-color .palette-yellow-2 {
  background: #ffffb8;
}
.main-color .palette-yellow-3 {
  background: #fffb8f;
}
.main-color .palette-yellow-4 {
  background: #fff566;
}
.main-color .palette-yellow-5 {
  background: #ffec3d;
}
.main-color .palette-yellow-6 {
  background: #fadb14;
}
.main-color .palette-yellow-7 {
  background: #d4b106;
}
.main-color .palette-yellow-8 {
  background: #ad8b00;
}
.main-color .palette-yellow-9 {
  background: #876800;
}
.main-color .palette-yellow-10 {
  background: #614700;
}
.main-color .palette-lime-1 {
  background: #fcffe6;
}
.main-color .palette-lime-2 {
  background: #f4ffb8;
}
.main-color .palette-lime-3 {
  background: #eaff8f;
}
.main-color .palette-lime-4 {
  background: #d3f261;
}
.main-color .palette-lime-5 {
  background: #bae637;
}
.main-color .palette-lime-6 {
  background: #a0d911;
}
.main-color .palette-lime-7 {
  background: #7cb305;
}
.main-color .palette-lime-8 {
  background: #5b8c00;
}
.main-color .palette-lime-9 {
  background: #3f6600;
}
.main-color .palette-lime-10 {
  background: #254000;
}
.main-color .palette-geekblue-1 {
  background: #f0f5ff;
}
.main-color .palette-geekblue-2 {
  background: #d6e4ff;
}
.main-color .palette-geekblue-3 {
  background: #adc6ff;
}
.main-color .palette-geekblue-4 {
  background: #85a5ff;
}
.main-color .palette-geekblue-5 {
  background: #597ef7;
}
.main-color .palette-geekblue-6 {
  background: #2f54eb;
}
.main-color .palette-geekblue-7 {
  background: #1d39c4;
}
.main-color .palette-geekblue-8 {
  background: #10239e;
}
.main-color .palette-geekblue-9 {
  background: #061178;
}
.main-color .palette-geekblue-10 {
  background: #030852;
}
.main-color .palette-gray-1 {
  background: #fff;
}
.main-color .palette-gray-2 {
  background: #fafafa;
}
.main-color .palette-gray-3 {
  background: #f5f5f5;
}
.main-color .palette-gray-4 {
  background: #e8e8e8;
}
.main-color .palette-gray-5 {
  background: #d9d9d9;
}
.main-color .palette-gray-6 {
  background: #bfbfbf;
}
.main-color .palette-gray-7 {
  background: #8c8c8c;
}
.main-color .palette-gray-8 {
  background: #595959;
}
.main-color .palette-gray-9 {
  background: #262626;
}
.main-color .palette-gray-10 {
  background: #000;
}
.main-color-item:first-child {
  border-radius: 4px 4px 0 0;
}
.main-color-item:last-child {
  border-radius: 0 0 4px 4px;
}
.main-color-item:hover {
  border-radius: 0 4px 4px 0;
}
.color-title {
  color: #5c6b77;
}
.color-description {
  color: #777;
}
.color-palette-horizontal .main-color-item {
  border-radius: 0;
}
.color-palette-horizontal .main-color-item:hover {
  border-radius: 4px 4px 0 0;
}
ul.anticons-list li {
  color: #555;
  background-color: #fff;
  border-radius: 4px;
}
ul.anticons-list li:hover {
  color: #fff;
  background-color: @primary-color;
}
ul.anticons-list li:hover .ant-badge {
  color: #fff;
}
ul.anticons-list li.outlined:hover {
  background-color: #8ecafe;
}
ul.anticons-list li.copied:hover {
  color: rgba(255, 255, 255, 0.2);
}
ul.anticons-list li::after {
  color: #fff;
}
.copied-code {
  background: #f5f5f5;
  border-radius: 2px;
}
.browser-mockup {
  border-top: 2em solid rgba(230, 230, 230, 0.7);
  border-radius: 3px 3px 0 0;
  box-shadow: 0 0.1em 0.5em 0 rgba(0, 0, 0, 0.28);
}
.browser-mockup::before {
  background-color: #f44;
  border-radius: 50%;
  box-shadow: 0 0 0 2px #f44, 1.5em 0 0 2px #9b3, 3em 0 0 2px #fb5;
}
.browser-mockup.with-tab::after {
  border-right: 0.8em solid transparent;
  border-bottom: 2em solid white;
  border-left: 0.8em solid transparent;
}
.browser-mockup.with-url::after {
  background-color: white;
  border-radius: 2px;
}
.motion-example {
  color: #fff;
  background: url(https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg) center / 180px;
  border-radius: 8px;
}
.algolia-autocomplete .ds-dropdown-menu {
  border: none;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}
.algolia-autocomplete .ds-dropdown-menu [class^='ds-dataset-'] {
  border: none;
}
.algolia-autocomplete .algolia-docsearch-suggestion--title {
  color: #314659;
}
.algolia-autocomplete .algolia-docsearch-suggestion--highlight {
  color: @primary-color;
}
#nprogress .bar {
  background: @primary-color;
}
#nprogress .peg {
  box-shadow: 0 0 10px #1890ff, 0 0 5px @primary-color;
}
#nprogress .spinner-icon {
  border-top-color: @primary-color;
  border-left-color: @primary-color;
}
.santa-body {
  color: #f91047;
  background-color: currentColor;
  border-radius: 50%;
  box-shadow: inset 0 -0.25em rgba(0, 0, 0, 0.1);
}
.santa-head {
  background-color: white;
  border-radius: 0.5em;
}
.santa-head::before {
  background-color: #ff9876;
}
.santa-ear {
  background-color: #fc8363;
}
.santa-ear:nth-of-type(1) {
  border-radius: 0.05em 0 0 0.05em;
}
.santa-ear:nth-of-type(2) {
  border-radius: 0 0.05em 0.05em 0;
}
.santa-hat {
  background-color: white;
}
.santa-hat::before {
  background: #f91047;
  border-radius: 0.5em 0.5em 0 0;
}
.santa-hat::after {
  background-color: white;
  border-radius: 50%;
  box-shadow: -0.2em 0.2em 0 0.12em rgba(0, 0, 0, 0.2), -0.2em 0.2em 0 0.12em #f91047;
}
.santa-eye {
  background-color: black;
  border-radius: 50%;
}
.santa-nose {
  background-color: #f24c4c;
  border-radius: 0 0 0.12em 0.12em;
}
.santa-mouth {
  background-color: black;
  border-bottom-right-radius: 5vw;
  border-bottom-left-radius: 5vw;
}
.browser-mockup {
  border-top: 2em solid rgba(230, 230, 230, 0.7);
  border-radius: 3px 3px 0 0;
  box-shadow: 0 0.1em 0.5em 0 rgba(0, 0, 0, 0.28);
}
.browser-mockup::before {
  background-color: #f44;
  border-radius: 50%;
  box-shadow: 0 0 0 2px #f44, 1.5em 0 0 2px #9b3, 3em 0 0 2px #fb5;
}
.browser-mockup.with-tab::after {
  border-right: 0.8em solid transparent;
  border-bottom: 2em solid white;
  border-left: 0.8em solid transparent;
}
.browser-mockup.with-url::after {
  background-color: white;
  border-radius: 2px;
}
.motion-example {
  color: #fff;
  background: url(https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg) center / 180px;
  border-radius: 8px;
}
.santa-body {
  color: #f91047;
  background-color: currentColor;
  border-radius: 50%;
  box-shadow: inset 0 -0.25em rgba(0, 0, 0, 0.1);
}
.santa-head {
  background-color: white;
  border-radius: 0.5em;
}
.santa-head::before {
  background-color: #ff9876;
}
.santa-ear {
  background-color: #fc8363;
}
.santa-ear:nth-of-type(1) {
  border-radius: 0.05em 0 0 0.05em;
}
.santa-ear:nth-of-type(2) {
  border-radius: 0 0.05em 0.05em 0;
}
.santa-hat {
  background-color: white;
}
.santa-hat::before {
  background: #f91047;
  border-radius: 0.5em 0.5em 0 0;
}
.santa-hat::after {
  background-color: white;
  border-radius: 50%;
  box-shadow: -0.2em 0.2em 0 0.12em rgba(0, 0, 0, 0.2), -0.2em 0.2em 0 0.12em #f91047;
}
.santa-eye {
  background-color: black;
  border-radius: 50%;
}
.santa-nose {
  background-color: #f24c4c;
  border-radius: 0 0 0.12em 0.12em;
}
.santa-mouth {
  background-color: black;
  border-bottom-right-radius: 5vw;
  border-bottom-left-radius: 5vw;
}
html {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
body {
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  color: rgba(0, 0, 0, 0.85);
}
abbr[title],
abbr[data-original-title] {
  border-bottom: 0;
}
a {
  color: @primary-color;
  background-color: transparent;
}
a:hover {
  color: color(~`colorPalette("@{primary-color}", 5)`);
}
a:active {
  color: color(~`colorPalette("@{primary-color}", 7)`);
}
a[disabled] {
  color: rgba(0, 0, 0, 0.25);
}
img {
  border-style: none;
}
table {
  border-collapse: collapse;
}
caption {
  color: rgba(0, 0, 0, 0.45);
}
input,
button,
select,
optgroup,
textarea {
  color: inherit;
}
button::-moz-focus-inner,
[type='button']::-moz-focus-inner,
[type='reset']::-moz-focus-inner,
[type='submit']::-moz-focus-inner {
  border-style: none;
}
fieldset {
  border: 0;
}
legend {
  color: inherit;
}
mark {
  background-color: #feffe6;
}
::selection {
  color: #fff;
  background: @primary-color;
}
.anticon {
  color: inherit;
}
html {
  --antd-wave-shadow-color: @primary-color;
}
[ant-click-animating-without-extra-node='true']::after,
.ant-click-animating-node {
  border-radius: inherit;
  box-shadow: 0 0 0 0 @primary-color;
  box-shadow: 0 0 0 0 var(--antd-wave-shadow-color);
}
.ant-calendar-picker {
  color: #30404f;
}
.ant-selectform-head {
  background: #fff;
}
.ant-selectbox-selectedlabel {
  color: #adb4bc;
}
.ant-selectdown-filtertitle {
  color: #30404f;
}
.ant-selectdown-disabled {
  color: #78838d;
}
.ant-selectdown-poperwraper {
  background: #fff;
  background-clip: padding-box;
  border: 1px solid #fff;
  border-radius: 4px !important;
  box-shadow: 0 2px 8px 0 rgba(6, 46, 95, 0.3);
}
.ant-selectdown-filteritem:hover {
  background-color: #e6fffb;
}
.ant-selectdown-selected {
  color: @primary-color;
  background: #fff;
}
*::-webkit-scrollbar-thumb {
  background-color: rgba(29, 34, 40, 0.2);
  border-radius: 3px;
}
*::-webkit-scrollbar-track {
  background: inherit;
}
*::-webkit-scrollbar-thumb:hover,
*::-webkit-scrollbar-scrollbarbutton:hover {
  background-color: rgba(29, 34, 40, 0.4);
}
body {
  color: #314659;
  background: #fff;
}
.main-wrapper {
  background: #fff;
}
.main-container {
  background: #fff;
}
.aside-container a[disabled] {
  color: #ccc;
}
.aside-container .menu-item-link-outside .anticon {
  color: @primary-color;
}
.outside-link-icon {
  color: #aaa;
}
.menu-site .ant-menu-item > a {
  color: #314659;
}
.menu-site .ant-menu-item-selected > a,
.menu-site .ant-menu-item > a:hover {
  color: @primary-color;
}
.menu-site .menu-antd-components-count {
  color: rgba(0, 0, 0, 0.25);
}
#_hj_feedback_container .path1::before {
  color: #1890ff !important;
}
#_hj_feedback_container .path2::before {
  color: #fff !important;
}
#header {
  background: #fff;
  box-shadow: 0 2px 8px #f0f1f2;
}
#header.home-nav-bottom {
  background: rgba(255, 255, 255, 0.9);
  border-bottom-color: #ebedee;
}
#header.home-nav-bottom .search {
  border-left-color: #ebedee;
}
#header.home-nav-bottom a {
  color: #314659;
}
#header .header-link {
  color: #314659;
}
#header .ant-menu-item-active .header-link {
  color: @primary-color;
}
#search-box {
  border-left: 1px solid #ebedf0;
}
#search-box .anticon {
  color: #ced4d9;
}
#search-box input {
  background: transparent;
  border: 0;
  box-shadow: none;
}
#search-box input::placeholder {
  color: #a3b1bf;
}
.header-lang-button {
  color: rgba(0, 0, 0, 0.65);
  border-color: #d9d9d9;
}
#nav {
  border: 0;
}
#nav.ant-menu-horizontal {
  border-bottom: none;
}
#nav.ant-menu-horizontal > .ant-menu-item,
#nav.ant-menu-horizontal > .ant-menu-submenu {
  border-top: 2px solid transparent;
}
#nav.ant-menu-horizontal > .ant-menu-item:hover,
#nav.ant-menu-horizontal > .ant-menu-submenu:hover {
  border-top: 2px solid @primary-color;
  border-bottom: 2px solid transparent;
}
#nav.ant-menu-horizontal > .ant-menu-submenu-open {
  border-top: 2px solid @primary-color;
  border-bottom: 2px solid transparent;
}
#nav.ant-menu-horizontal > .ant-menu-item-selected {
  border-top: 2px solid @primary-color;
  border-bottom: 2px solid transparent;
}
#nav.ant-menu-horizontal > .ant-menu-item-selected a {
  color: @primary-color;
}
.component-select.ant-select-dropdown {
  border: 0;
  border-radius: 0;
  box-shadow: 0 0 8px rgba(0, 0, 0, 0.25);
}
.component-select .ant-select-dropdown-menu-item {
  border-radius: 0 !important;
}
.component-select .ant-component-decs {
  color: #aaa;
}
.cover-wrapper h3 {
  color: #000;
}
.cover-wrapper .cover-link a {
  border-radius: 4px;
}
.cover-wrapper .cover-link a.start {
  background: #2a85ff;
  border: 1px solid #2a85ff;
  color: #fff;
  box-shadow: 0 0 10px -3px #666;
}
.cover-wrapper .cover-link a.start:hover {
  box-shadow: 0 0 29px -3px #666;
}
.cover-wrapper .cover-link a.github {
  border: 1px solid #24292d;
  background: #24292d;
  color: rgba(255, 255, 255, 0.75);
  box-shadow: 0 0 10px -3px #666;
}
.cover-wrapper .cover-link a.github:hover {
  color: #ffffff;
  box-shadow: 0 0 29px -3px #666;
}
.cover-wrapper .slogan {
  color: #999;
}
.prev-next-nav {
  border-top: 1px solid #ebedf0;
}
.prev-next-nav > a.prev-page .footer-nav-icon-before {
  color: #697b8c;
}
.prev-next-nav > a.prev-page:hover .footer-nav-icon-before {
  color: @primary-color;
}
.prev-next-nav > .next-page .footer-nav-icon-after {
  color: #697b8c;
}
.prev-next-nav > .next-page:hover .footer-nav-icon-after {
  color: @primary-color;
}
.markdown {
  color: #314659;
}
.markdown p > img {
  box-shadow: 0 8px 20px rgba(143, 168, 191, 0.35);
}
.markdown p > img.markdown-inline-image {
  box-shadow: none;
}
.markdown h1 {
  color: #0d1a26;
}
.markdown h2,
.markdown h3,
.markdown h4,
.markdown h5,
.markdown h6 {
  color: #0d1a26;
}
.markdown hr {
  background: #ebedf0;
  border: 0;
}
.markdown code {
  background: #f2f4f5;
  border: 1px solid #eee;
  border-radius: 3px;
}
.markdown pre {
  background: #f2f4f5;
  border-radius: 2px;
}
.markdown pre code {
  color: #314659;
  background: #f2f4f5;
  border: none;
}
.markdown > table {
  border: 1px solid #ebedf0;
  border-collapse: collapse;
  border-spacing: 0;
}
.markdown > table th {
  color: #5c6b77;
  background: rgba(0, 0, 0, 0.02);
}
.markdown > table th,
.markdown > table td {
  border: 1px solid #ebedf0;
}
.markdown blockquote {
  color: #697b8c;
  border-left: 4px solid #ebedf0;
}
.markdown .waiting {
  color: #ccc;
}
.markdown a.edit-button i {
  color: #697b8c;
}
.markdown a.edit-button i:hover {
  color: @primary-color;
}
.markdown.api-container table {
  border-width: 0;
}
.markdown.api-container table th,
.markdown.api-container table td {
  border-color: #e8e8e8;
  border-width: 1px 0;
}
.markdown.api-container table th {
  border-width: 0 0 2px 0;
}
.markdown.api-container table td:first-child {
  color: #003a8c;
}
.markdown.api-container table td:nth-child(3) {
  color: #c41d7f;
}
.grid-demo .demo-row,
[id^='components-grid-demo-'] .demo-row,
.grid-demo .code-box-demo .demo-row,
[id^='components-grid-demo-'] .code-box-demo .demo-row {
  background-image: linear-gradient(90deg, #f5f5f5 4.16666667%, transparent 4.16666667%, transparent 8.33333333%, #f5f5f5 8.33333333%, #f5f5f5 12.5%, transparent 12.5%, transparent 16.66666667%, #f5f5f5 16.66666667%, #f5f5f5 20.83333333%, transparent 20.83333333%, transparent 25%, #f5f5f5 25%, #f5f5f5 29.16666667%, transparent 29.16666667%, transparent 33.33333333%, #f5f5f5 33.33333333%, #f5f5f5 37.5%, transparent 37.5%, transparent 41.66666667%, #f5f5f5 41.66666667%, #f5f5f5 45.83333333%, transparent 45.83333333%, transparent 50%, #f5f5f5 50%, #f5f5f5 54.16666667%, transparent 54.16666667%, transparent 58.33333333%, #f5f5f5 58.33333333%, #f5f5f5 62.5%, transparent 62.5%, transparent 66.66666667%, #f5f5f5 66.66666667%, #f5f5f5 70.83333333%, transparent 70.83333333%, transparent 75%, #f5f5f5 75%, #f5f5f5 79.16666667%, transparent 79.16666667%, transparent 83.33333333%, #f5f5f5 83.33333333%, #f5f5f5 87.5%, transparent 87.5%, transparent 91.66666667%, #f5f5f5 91.66666667%, #f5f5f5 95.83333333%, transparent 95.83333333%);
}
.grid-demo .ant-row-flex,
[id^='components-grid-demo-'] .ant-row-flex,
.grid-demo .code-box-demo .ant-row-flex,
[id^='components-grid-demo-'] .code-box-demo .ant-row-flex {
  background: #f5f5f5;
}
.grid-demo .ant-row > div,
[id^='components-grid-demo-'] .ant-row > div,
.grid-demo .code-box-demo .ant-row > div,
[id^='components-grid-demo-'] .code-box-demo .ant-row > div,
.grid-demo .ant-row-flex > div,
[id^='components-grid-demo-'] .ant-row-flex > div,
.grid-demo .code-box-demo .ant-row-flex > div,
[id^='components-grid-demo-'] .code-box-demo .ant-row-flex > div {
  color: #fff;
  border-radius: 0;
}
.grid-demo .code-box-demo .ant-row > div:not(.gutter-row),
[id^='components-grid-demo-'] .code-box-demo .ant-row > div:not(.gutter-row),
.grid-demo .code-box-demo .ant-row-flex > div:not(.gutter-row),
[id^='components-grid-demo-'] .code-box-demo .ant-row-flex > div:not(.gutter-row) {
  background: #00a0e9;
}
.grid-demo .code-box-demo .ant-row > div:not(.gutter-row):nth-child(2n + 1),
[id^='components-grid-demo-'] .code-box-demo .ant-row > div:not(.gutter-row):nth-child(2n + 1),
.grid-demo .code-box-demo .ant-row-flex > div:not(.gutter-row):nth-child(2n + 1),
[id^='components-grid-demo-'] .code-box-demo .ant-row-flex > div:not(.gutter-row):nth-child(2n + 1) {
  background: rgba(0, 160, 233, 0.7);
}
.grid-demo .ant-row .demo-col,
[id^='components-grid-demo-'] .ant-row .demo-col,
.grid-demo .code-box-demo .ant-row .demo-col,
[id^='components-grid-demo-'] .code-box-demo .ant-row .demo-col {
  color: #fff;
  border: none;
}
.grid-demo .ant-row .demo-col-1,
[id^='components-grid-demo-'] .ant-row .demo-col-1,
.grid-demo .ant-row .demo-col-1,
[id^='components-grid-demo-'] .ant-row .demo-col-1 {
  background: rgba(0, 160, 233, 0.7);
}
.grid-demo .ant-row .demo-col-2,
[id^='components-grid-demo-'] .ant-row .demo-col-2,
.grid-demo .code-box-demo .ant-row .demo-col-2,
[id^='components-grid-demo-'] .code-box-demo .ant-row .demo-col-2 {
  background: rgba(0, 160, 233, 0.5);
}
.grid-demo .ant-row .demo-col-3,
[id^='components-grid-demo-'] .ant-row .demo-col-3,
.grid-demo .code-box-demo .ant-row .demo-col-3,
[id^='components-grid-demo-'] .code-box-demo .ant-row .demo-col-3 {
  color: #999;
  background: rgba(255, 255, 255, 0.2);
}
.grid-demo .ant-row .demo-col-4,
[id^='components-grid-demo-'] .ant-row .demo-col-4,
.grid-demo .code-box-demo .ant-row .demo-col-4,
[id^='components-grid-demo-'] .code-box-demo .ant-row .demo-col-4 {
  background: rgba(0, 160, 233, 0.6);
}
.grid-demo .ant-row .demo-col-5,
[id^='components-grid-demo-'] .ant-row .demo-col-5,
.grid-demo .code-box-demo .ant-row .demo-col-5,
[id^='components-grid-demo-'] .code-box-demo .ant-row .demo-col-5 {
  color: #999;
  background: rgba(255, 255, 255, 0.5);
}
.resource-card {
  color: #777;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
}
.resource-card:hover {
  border-color: transparent;
  box-shadow: 0 3px 8px #d3ddeb;
}
.resource-card:hover .resource-card-title {
  color: @primary-color;
}
.resource-card-title {
  color: #314659;
}
.resource-card-hot-badge {
  color: #fff;
  background: #f50;
  border-radius: 2px;
}
.resource-card-description {
  color: #697b8c;
}
.preview-image-wrapper {
  background: #f2f4f5;
}
.preview-image-wrapper.video {
  background: 0;
}
.preview-image-wrapper.good::after {
  background: @primary-color;
}
.preview-image-wrapper.bad::after {
  background: #f5222d;
}
.preview-image-title {
  color: #314659;
}
.preview-image-description {
  color: #697b8c;
}
.preview-image-description hr {
  background: none;
  border: 0;
}
.preview-image-box img {
  background: #fff;
  border-radius: 4px;
}
.preview-image-box img.no-padding {
  background: none;
}
.preview-image-boxes.preview-image-boxes-with-carousel img {
  box-shadow: 0 1px 0 0 #ddd, 0 3px 0 0 #fff, 0 4px 0 0 #ddd, 0 6px 0 0 #fff, 0 7px 0 0 #ddd;
}
.preview-image-box img:hover {
  box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.3);
}
.image-modal .ant-carousel .slick-dots li button {
  background: #888;
}
.principle-wrapper .principle {
  border: 1px solid #e8e8e8;
  border-radius: 4px;
}
.toc {
  border-left: 1px solid #ebedf0;
}
.toc a {
  color: #314659;
  border-left: 1px solid transparent;
}
.toc a:hover {
  color: @primary-color;
}
.toc a.current {
  color: @primary-color;
  border-color: @primary-color;
}
.toc-affix .ant-affix {
  background: #fff;
}
.toc-affix-bottom .ant-affix {
  background: #fff;
}
#page-404 {
  background-image: url('https://os.alipayobjects.com/rmsportal/NOAjOBbnYCrNzrW.jpg');
  background-repeat: no-repeat;
  background-position: center;
  background-size: 100%;
  background-attachment: fixed;
}
#page-404 h1 {
  color: @primary-color;
}
#page-404 p {
  color: #314659;
}
pre code {
  color: #314659;
  background: white;
  border: 1px solid #e9e9e9;
  border-radius: 2px;
}
code[class*='language-'],
pre[class*='language-'] {
  color: black;
  background: none;
}
pre[class*='language-']::-moz-selection,
pre[class*='language-'] ::-moz-selection,
code[class*='language-']::-moz-selection,
code[class*='language-'] ::-moz-selection {
  background: #b3d4fc;
}
pre[class*='language-']::selection,
pre[class*='language-'] ::selection,
code[class*='language-']::selection,
code[class*='language-'] ::selection {
  background: #b3d4fc;
}
:not(pre) > code[class*='language-'],
pre[class*='language-'] {
  background: #f2f4f5;
}
:not(pre) > code[class*='language-'] {
  border-radius: 0.3em;
}
.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: slategray;
}
.token.punctuation {
  color: #999;
}
.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
  color: #f81d22;
}
.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: #0b8235;
}
.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
  color: #0b8235;
}
.token.atrule,
.token.attr-value,
.token.keyword {
  color: #008dff;
}
.token.function {
  color: #f81d22;
}
.token.regex,
.token.important,
.token.variable {
  color: #e90;
}
.code-box {
  border: 1px solid #ebedf0;
  border-radius: 2px;
}
.code-box:target {
  border: 1px solid @primary-color;
}
.code-box-expand-trigger {
  color: #3b4357;
}
.code-box-title {
  color: #777;
  background: #fff;
  border-radius: 2px 2px 0 0;
}
.code-box-title a,
.code-box-title a:hover {
  color: #314659;
}
.code-box a.edit-button {
  background: #fff;
}
.code-box-demo {
  color: rgba(0, 0, 0, 0.65);
  border-bottom: 1px solid #ebedf0;
}
.code-box iframe {
  border: 0;
}
.code-box-meta.markdown {
  border-radius: 0 0 2px 2px;
}
.code-box.expand .code-box-meta {
  border-bottom: 1px dashed #ebedf0;
  border-radius: 0;
}
.code-box .code-expand-icon-show,
.code-box .code-expand-icon-hide {
  box-shadow: none;
}
.code-box .highlight-wrapper {
  border-radius: 0 0 2px 2px;
}
.code-box .highlight pre {
  background: #fff;
}
.code-box .highlight:not(:first-child) {
  border-top: 1px dashed #ebedf0;
}
.code-box-actions {
  border-top: 1px dashed #ebedf0;
}
.code-box-code-copy {
  color: #697b8c;
  background: #fff;
  border-radius: 20px;
}
.code-box-code-copy:hover {
  color: #697b8c;
}
.code-box-code-copy.anticon-check {
  color: #52c41a !important;
}
.code-box-codepen {
  background: transparent url('https://gw.alipayobjects.com/zos/rmsportal/OtZslpOjYXijshDERXwc.svg') center / 14px no-repeat;
  border: 0;
}
.code-box-riddle {
  background: transparent url('https://gw.alipayobjects.com/zos/rmsportal/DlHbxMCyeuyOrqOdbgik.svg') center / 14px no-repeat;
  border: 0;
}
.code-box-codesandbox {
  background: transparent url('https://gw.alipayobjects.com/zos/rmsportal/aaYmtdDyHSCkXyLZVgGK.svg') center / 14px no-repeat;
  border: 0;
}
.code-box pre code {
  background: #fff;
  border: none;
}
.code-box-debug {
  border-color: #d3adf7;
}
.code-box-debug .code-box-title a {
  color: #722ed1;
}
.color-palette-picker-validation {
  color: #f5222d;
}
.main-color .palette-blue-1 {
  background: color(~`colorPalette("@{primary-color}", 1)`);
}
.main-color .palette-blue-2 {
  background: color(~`colorPalette("@{primary-color}", 2)`);
}
.main-color .palette-blue-3 {
  background: color(~`colorPalette("@{primary-color}", 3)`);
}
.main-color .palette-blue-4 {
  background: color(~`colorPalette("@{primary-color}", 4)`);
}
.main-color .palette-blue-5 {
  background: color(~`colorPalette("@{primary-color}", 5)`);
}
.main-color .palette-blue-6 {
  background: @primary-color;
}
.main-color .palette-blue-7 {
  background: color(~`colorPalette("@{primary-color}", 7)`);
}
.main-color .palette-blue-8 {
  background: #0050b3;
}
.main-color .palette-blue-9 {
  background: #003a8c;
}
.main-color .palette-blue-10 {
  background: #002766;
}
.main-color .palette-purple-1 {
  background: #f9f0ff;
}
.main-color .palette-purple-2 {
  background: #efdbff;
}
.main-color .palette-purple-3 {
  background: #d3adf7;
}
.main-color .palette-purple-4 {
  background: #b37feb;
}
.main-color .palette-purple-5 {
  background: #9254de;
}
.main-color .palette-purple-6 {
  background: #722ed1;
}
.main-color .palette-purple-7 {
  background: #531dab;
}
.main-color .palette-purple-8 {
  background: #391085;
}
.main-color .palette-purple-9 {
  background: #22075e;
}
.main-color .palette-purple-10 {
  background: #120338;
}
.main-color .palette-cyan-1 {
  background: #e6fffb;
}
.main-color .palette-cyan-2 {
  background: #b5f5ec;
}
.main-color .palette-cyan-3 {
  background: #87e8de;
}
.main-color .palette-cyan-4 {
  background: #5cdbd3;
}
.main-color .palette-cyan-5 {
  background: #36cfc9;
}
.main-color .palette-cyan-6 {
  background: #13c2c2;
}
.main-color .palette-cyan-7 {
  background: #08979c;
}
.main-color .palette-cyan-8 {
  background: #006d75;
}
.main-color .palette-cyan-9 {
  background: #00474f;
}
.main-color .palette-cyan-10 {
  background: #002329;
}
.main-color .palette-green-1 {
  background: #f6ffed;
}
.main-color .palette-green-2 {
  background: #d9f7be;
}
.main-color .palette-green-3 {
  background: #b7eb8f;
}
.main-color .palette-green-4 {
  background: #95de64;
}
.main-color .palette-green-5 {
  background: #73d13d;
}
.main-color .palette-green-6 {
  background: #52c41a;
}
.main-color .palette-green-7 {
  background: #389e0d;
}
.main-color .palette-green-8 {
  background: #237804;
}
.main-color .palette-green-9 {
  background: #135200;
}
.main-color .palette-green-10 {
  background: #092b00;
}
.main-color .palette-magenta-1 {
  background: #fff0f6;
}
.main-color .palette-magenta-2 {
  background: #ffd6e7;
}
.main-color .palette-magenta-3 {
  background: #ffadd2;
}
.main-color .palette-magenta-4 {
  background: #ff85c0;
}
.main-color .palette-magenta-5 {
  background: #f759ab;
}
.main-color .palette-magenta-6 {
  background: #eb2f96;
}
.main-color .palette-magenta-7 {
  background: #c41d7f;
}
.main-color .palette-magenta-8 {
  background: #9e1068;
}
.main-color .palette-magenta-9 {
  background: #780650;
}
.main-color .palette-magenta-10 {
  background: #520339;
}
.main-color .palette-red-1 {
  background: #fff1f0;
}
.main-color .palette-red-2 {
  background: #ffccc7;
}
.main-color .palette-red-3 {
  background: #ffa39e;
}
.main-color .palette-red-4 {
  background: #ff7875;
}
.main-color .palette-red-5 {
  background: #ff4d4f;
}
.main-color .palette-red-6 {
  background: #f5222d;
}
.main-color .palette-red-7 {
  background: #cf1322;
}
.main-color .palette-red-8 {
  background: #a8071a;
}
.main-color .palette-red-9 {
  background: #820014;
}
.main-color .palette-red-10 {
  background: #5c0011;
}
.main-color .palette-volcano-1 {
  background: #fff2e8;
}
.main-color .palette-volcano-2 {
  background: #ffd8bf;
}
.main-color .palette-volcano-3 {
  background: #ffbb96;
}
.main-color .palette-volcano-4 {
  background: #ff9c6e;
}
.main-color .palette-volcano-5 {
  background: #ff7a45;
}
.main-color .palette-volcano-6 {
  background: #fa541c;
}
.main-color .palette-volcano-7 {
  background: #d4380d;
}
.main-color .palette-volcano-8 {
  background: #ad2102;
}
.main-color .palette-volcano-9 {
  background: #871400;
}
.main-color .palette-volcano-10 {
  background: #610b00;
}
.main-color .palette-orange-1 {
  background: #fff7e6;
}
.main-color .palette-orange-2 {
  background: #ffe7ba;
}
.main-color .palette-orange-3 {
  background: #ffd591;
}
.main-color .palette-orange-4 {
  background: #ffc069;
}
.main-color .palette-orange-5 {
  background: #ffa940;
}
.main-color .palette-orange-6 {
  background: #fa8c16;
}
.main-color .palette-orange-7 {
  background: #d46b08;
}
.main-color .palette-orange-8 {
  background: #ad4e00;
}
.main-color .palette-orange-9 {
  background: #873800;
}
.main-color .palette-orange-10 {
  background: #612500;
}
.main-color .palette-gold-1 {
  background: #fffbe6;
}
.main-color .palette-gold-2 {
  background: #fff1b8;
}
.main-color .palette-gold-3 {
  background: #ffe58f;
}
.main-color .palette-gold-4 {
  background: #ffd666;
}
.main-color .palette-gold-5 {
  background: #ffc53d;
}
.main-color .palette-gold-6 {
  background: #faad14;
}
.main-color .palette-gold-7 {
  background: #d48806;
}
.main-color .palette-gold-8 {
  background: #ad6800;
}
.main-color .palette-gold-9 {
  background: #874d00;
}
.main-color .palette-gold-10 {
  background: #613400;
}
.main-color .palette-yellow-1 {
  background: #feffe6;
}
.main-color .palette-yellow-2 {
  background: #ffffb8;
}
.main-color .palette-yellow-3 {
  background: #fffb8f;
}
.main-color .palette-yellow-4 {
  background: #fff566;
}
.main-color .palette-yellow-5 {
  background: #ffec3d;
}
.main-color .palette-yellow-6 {
  background: #fadb14;
}
.main-color .palette-yellow-7 {
  background: #d4b106;
}
.main-color .palette-yellow-8 {
  background: #ad8b00;
}
.main-color .palette-yellow-9 {
  background: #876800;
}
.main-color .palette-yellow-10 {
  background: #614700;
}
.main-color .palette-lime-1 {
  background: #fcffe6;
}
.main-color .palette-lime-2 {
  background: #f4ffb8;
}
.main-color .palette-lime-3 {
  background: #eaff8f;
}
.main-color .palette-lime-4 {
  background: #d3f261;
}
.main-color .palette-lime-5 {
  background: #bae637;
}
.main-color .palette-lime-6 {
  background: #a0d911;
}
.main-color .palette-lime-7 {
  background: #7cb305;
}
.main-color .palette-lime-8 {
  background: #5b8c00;
}
.main-color .palette-lime-9 {
  background: #3f6600;
}
.main-color .palette-lime-10 {
  background: #254000;
}
.main-color .palette-geekblue-1 {
  background: #f0f5ff;
}
.main-color .palette-geekblue-2 {
  background: #d6e4ff;
}
.main-color .palette-geekblue-3 {
  background: #adc6ff;
}
.main-color .palette-geekblue-4 {
  background: #85a5ff;
}
.main-color .palette-geekblue-5 {
  background: #597ef7;
}
.main-color .palette-geekblue-6 {
  background: #2f54eb;
}
.main-color .palette-geekblue-7 {
  background: #1d39c4;
}
.main-color .palette-geekblue-8 {
  background: #10239e;
}
.main-color .palette-geekblue-9 {
  background: #061178;
}
.main-color .palette-geekblue-10 {
  background: #030852;
}
.main-color .palette-gray-1 {
  background: #fff;
}
.main-color .palette-gray-2 {
  background: #fafafa;
}
.main-color .palette-gray-3 {
  background: #f5f5f5;
}
.main-color .palette-gray-4 {
  background: #e8e8e8;
}
.main-color .palette-gray-5 {
  background: #d9d9d9;
}
.main-color .palette-gray-6 {
  background: #bfbfbf;
}
.main-color .palette-gray-7 {
  background: #8c8c8c;
}
.main-color .palette-gray-8 {
  background: #595959;
}
.main-color .palette-gray-9 {
  background: #262626;
}
.main-color .palette-gray-10 {
  background: #000;
}
.main-color-item:first-child {
  border-radius: 4px 4px 0 0;
}
.main-color-item:last-child {
  border-radius: 0 0 4px 4px;
}
.main-color-item:hover {
  border-radius: 0 4px 4px 0;
}
.color-title {
  color: #5c6b77;
}
.color-description {
  color: #777;
}
.color-palette-horizontal .main-color-item {
  border-radius: 0;
}
.color-palette-horizontal .main-color-item:hover {
  border-radius: 4px 4px 0 0;
}
ul.anticons-list li {
  color: #555;
  background-color: #fff;
  border-radius: 4px;
}
ul.anticons-list li:hover {
  color: #fff;
  background-color: @primary-color;
}
ul.anticons-list li:hover .ant-badge {
  color: #fff;
}
ul.anticons-list li.outlined:hover {
  background-color: #8ecafe;
}
ul.anticons-list li.copied:hover {
  color: rgba(255, 255, 255, 0.2);
}
ul.anticons-list li::after {
  color: #fff;
}
.copied-code {
  background: #f5f5f5;
  border-radius: 2px;
}
.browser-mockup {
  border-top: 2em solid rgba(230, 230, 230, 0.7);
  border-radius: 3px 3px 0 0;
  box-shadow: 0 0.1em 0.5em 0 rgba(0, 0, 0, 0.28);
}
.browser-mockup::before {
  background-color: #f44;
  border-radius: 50%;
  box-shadow: 0 0 0 2px #f44, 1.5em 0 0 2px #9b3, 3em 0 0 2px #fb5;
}
.browser-mockup.with-tab::after {
  border-right: 0.8em solid transparent;
  border-bottom: 2em solid white;
  border-left: 0.8em solid transparent;
}
.browser-mockup.with-url::after {
  background-color: white;
  border-radius: 2px;
}
.motion-example {
  color: #fff;
  background: url(https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg) center / 180px;
  border-radius: 8px;
}
.algolia-autocomplete .ds-dropdown-menu {
  border: none;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}
.algolia-autocomplete .ds-dropdown-menu [class^='ds-dataset-'] {
  border: none;
}
.algolia-autocomplete .algolia-docsearch-suggestion--title {
  color: #314659;
}
.algolia-autocomplete .algolia-docsearch-suggestion--highlight {
  color: @primary-color;
}
#nprogress .bar {
  background: @primary-color;
}
#nprogress .peg {
  box-shadow: 0 0 10px #1890ff, 0 0 5px @primary-color;
}
#nprogress .spinner-icon {
  border-top-color: @primary-color;
  border-left-color: @primary-color;
}
.santa-body {
  color: #f91047;
  background-color: currentColor;
  border-radius: 50%;
  box-shadow: inset 0 -0.25em rgba(0, 0, 0, 0.1);
}
.santa-head {
  background-color: white;
  border-radius: 0.5em;
}
.santa-head::before {
  background-color: #ff9876;
}
.santa-ear {
  background-color: #fc8363;
}
.santa-ear:nth-of-type(1) {
  border-radius: 0.05em 0 0 0.05em;
}
.santa-ear:nth-of-type(2) {
  border-radius: 0 0.05em 0.05em 0;
}
.santa-hat {
  background-color: white;
}
.santa-hat::before {
  background: #f91047;
  border-radius: 0.5em 0.5em 0 0;
}
.santa-hat::after {
  background-color: white;
  border-radius: 50%;
  box-shadow: -0.2em 0.2em 0 0.12em rgba(0, 0, 0, 0.2), -0.2em 0.2em 0 0.12em #f91047;
}
.santa-eye {
  background-color: black;
  border-radius: 50%;
}
.santa-nose {
  background-color: #f24c4c;
  border-radius: 0 0 0.12em 0.12em;
}
.santa-mouth {
  background-color: black;
  border-bottom-right-radius: 5vw;
  border-bottom-left-radius: 5vw;
}

